; ModuleID = 'SimdSse2Neural_O3.ll'
source_filename = "SimdSse2Neural.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$_ZN4Simd4Sse213NeuralConvertILb1EEEvPKhmmmPf = comdat any

$_ZN4Simd4Sse213NeuralConvertILb0EEEvPKhmmmPf = comdat any

@.str = private unnamed_addr constant [11 x i8] c"width >= A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"SimdSse2Neural.cpp\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb1ELb1EEEvPKhmmmPf = private unnamed_addr constant [129 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = true, align = true, stream = true]\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb1ELb0EEEvPKhmmmPf = private unnamed_addr constant [130 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = true, align = true, stream = false]\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb0ELb0EEEvPKhmmmPf = private unnamed_addr constant [131 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = true, align = false, stream = false]\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb1ELb1EEEvPKhmmmPf = private unnamed_addr constant [130 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = false, align = true, stream = true]\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb1ELb0EEEvPKhmmmPf = private unnamed_addr constant [131 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = false, align = true, stream = false]\00", align 1
@__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb0ELb0EEEvPKhmmmPf = private unnamed_addr constant [132 x i8] c"void Simd::Sse2::NeuralConvert(const uint8_t *, size_t, size_t, size_t, float *) [inversion = false, align = false, stream = false]\00", align 1

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @_ZN4Simd4Sse26InvertILb1EEEDv2_xS2_(<2 x i64>) local_unnamed_addr #0 {
  %2 = xor <2 x i64> %0, <i64 -1, i64 -1>
  ret <2 x i64> %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @_ZN4Simd4Sse26InvertILb0EEEDv2_xS2_(<2 x i64> returned) local_unnamed_addr #0 {
  ret <2 x i64> %0
}

; Function Attrs: uwtable
define void @_ZN4Simd4Sse213NeuralConvertEPKhmmmPfi(i8*, i64, i64, i64, float*, i32) local_unnamed_addr #1 {
  %7 = icmp eq i32 %5, 0
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %6
  tail call void @_ZN4Simd4Sse213NeuralConvertILb1EEEvPKhmmmPf(i8* %0, i64 %1, i64 %2, i64 %3, float* %4)
  br label %10

; <label>:9:                                      ; preds = %6
  tail call void @_ZN4Simd4Sse213NeuralConvertILb0EEEvPKhmmmPf(i8* %0, i64 %1, i64 %2, i64 %3, float* %4)
  br label %10

; <label>:10:                                     ; preds = %9, %8
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN4Simd4Sse213NeuralConvertILb1EEEvPKhmmmPf(i8*, i64, i64, i64, float*) local_unnamed_addr #1 comdat {
  %6 = ptrtoint i8* %0 to i64
  %7 = and i64 %6, -16
  %8 = inttoptr i64 %7 to i8*
  %9 = icmp eq i8* %8, %0
  %10 = and i64 %1, -16
  %11 = icmp eq i64 %10, %1
  %12 = and i1 %11, %9
  br i1 %12, label %13, label %408

; <label>:13:                                     ; preds = %5
  %14 = bitcast float* %4 to i8*
  %15 = ptrtoint float* %4 to i64
  %16 = and i64 %15, -16
  %17 = inttoptr i64 %16 to i8*
  %18 = icmp eq i8* %17, %14
  %19 = and i64 %2, -16
  %20 = icmp eq i64 %19, %2
  %21 = and i1 %20, %18
  br i1 %21, label %22, label %408

; <label>:22:                                     ; preds = %13
  %23 = shl i64 %2, 2
  %24 = mul i64 %23, %3
  %25 = icmp ugt i64 %24, 1048575
  %26 = icmp ugt i64 %2, 15
  br i1 %25, label %27, label %218

; <label>:27:                                     ; preds = %22
  br i1 %26, label %29, label %28

; <label>:28:                                     ; preds = %27
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb1ELb1EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:29:                                     ; preds = %27
  %30 = icmp eq i64 %3, 0
  br i1 %30, label %217, label %31

; <label>:31:                                     ; preds = %29
  br label %32

; <label>:32:                                     ; preds = %212, %31
  %33 = phi i64 [ %215, %212 ], [ 0, %31 ]
  %34 = phi i8* [ %213, %212 ], [ %0, %31 ]
  %35 = phi float* [ %214, %212 ], [ %4, %31 ]
  br label %36

; <label>:36:                                     ; preds = %36, %32
  %37 = phi i64 [ 0, %32 ], [ %210, %36 ]
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = getelementptr inbounds float, float* %35, i64 %37
  %40 = bitcast i8* %38 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 16, !tbaa !2
  %42 = xor <16 x i8> %41, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = bitcast <16 x i8> %43 to <8 x i16>
  %45 = shufflevector <8 x i16> %44, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %46 = bitcast float* %39 to <4 x float>*
  %47 = getelementptr inbounds float, float* %39, i64 4
  %48 = shufflevector <8 x i16> %44, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = extractelement <8 x i16> %45, i32 0
  %50 = extractelement <8 x i16> %45, i32 1
  %51 = extractelement <8 x i16> %45, i32 2
  %52 = extractelement <8 x i16> %45, i32 3
  %53 = extractelement <8 x i16> %45, i32 4
  %54 = extractelement <8 x i16> %45, i32 5
  %55 = extractelement <8 x i16> %45, i32 6
  %56 = extractelement <8 x i16> %45, i32 7
  %57 = extractelement <8 x i16> %48, i32 0
  %58 = extractelement <8 x i16> %48, i32 1
  %59 = extractelement <8 x i16> %48, i32 2
  %60 = extractelement <8 x i16> %48, i32 3
  %61 = extractelement <8 x i16> %48, i32 4
  %62 = extractelement <8 x i16> %48, i32 5
  %63 = extractelement <8 x i16> %48, i32 6
  %64 = extractelement <8 x i16> %48, i32 7
  %65 = insertelement <16 x i16> undef, i16 %50, i32 0
  %66 = insertelement <16 x i16> %65, i16 %51, i32 1
  %67 = insertelement <16 x i16> %66, i16 %51, i32 2
  %68 = insertelement <16 x i16> %67, i16 %52, i32 3
  %69 = insertelement <16 x i16> %68, i16 %52, i32 4
  %70 = insertelement <16 x i16> %69, i16 %52, i32 5
  %71 = insertelement <16 x i16> %70, i16 %53, i32 6
  %72 = insertelement <16 x i16> %71, i16 %53, i32 7
  %73 = insertelement <16 x i16> %72, i16 %53, i32 8
  %74 = insertelement <16 x i16> %73, i16 %53, i32 9
  %75 = insertelement <16 x i16> %74, i16 %54, i32 10
  %76 = insertelement <16 x i16> %75, i16 %54, i32 11
  %77 = insertelement <16 x i16> %76, i16 %54, i32 12
  %78 = insertelement <16 x i16> %77, i16 %54, i32 13
  %79 = insertelement <16 x i16> %78, i16 %54, i32 14
  %80 = insertelement <16 x i16> %79, i16 %55, i32 15
  %81 = insertelement <16 x i16> %80, i16 %55, i32 16
  %82 = insertelement <16 x i16> %81, i16 %55, i32 17
  %83 = insertelement <16 x i16> %82, i16 %55, i32 18
  %84 = insertelement <16 x i16> %83, i16 %55, i32 19
  %85 = insertelement <16 x i16> %84, i16 %55, i32 20
  %86 = insertelement <16 x i16> %85, i16 %56, i32 21
  %87 = insertelement <16 x i16> %86, i16 %56, i32 22
  %88 = insertelement <16 x i16> %87, i16 %56, i32 23
  %89 = insertelement <16 x i16> %88, i16 %56, i32 24
  %90 = insertelement <16 x i16> %89, i16 %56, i32 25
  %91 = insertelement <16 x i16> %90, i16 %56, i32 26
  %92 = insertelement <16 x i16> %91, i16 %56, i32 27
  %93 = insertelement <16 x i16> %92, i16 %58, i32 28
  %94 = insertelement <16 x i16> %93, i16 %59, i32 29
  %95 = insertelement <16 x i16> %94, i16 %59, i32 30
  %96 = insertelement <16 x i16> %95, i16 %60, i32 31
  %97 = insertelement <16 x i16> %96, i16 %60, i32 32
  %98 = insertelement <16 x i16> %97, i16 %60, i32 33
  %99 = insertelement <16 x i16> %98, i16 %61, i32 34
  %100 = insertelement <16 x i16> %99, i16 %61, i32 35
  %101 = insertelement <16 x i16> %100, i16 %61, i32 36
  %102 = insertelement <16 x i16> %101, i16 %61, i32 37
  %103 = insertelement <16 x i16> %102, i16 %62, i32 38
  %104 = insertelement <16 x i16> %103, i16 %62, i32 39
  %105 = insertelement <16 x i16> %104, i16 %62, i32 40
  %106 = insertelement <16 x i16> %105, i16 %62, i32 41
  %107 = insertelement <16 x i16> %106, i16 %62, i32 42
  %108 = insertelement <16 x i16> %107, i16 %63, i32 43
  %109 = insertelement <16 x i16> %108, i16 %63, i32 44
  %110 = insertelement <16 x i16> %109, i16 %63, i32 45
  %111 = insertelement <16 x i16> %110, i16 %63, i32 46
  %112 = insertelement <16 x i16> %111, i16 %63, i32 47
  %113 = insertelement <16 x i16> %112, i16 %63, i32 48
  %114 = insertelement <16 x i16> %113, i16 %64, i32 49
  %115 = insertelement <16 x i16> %114, i16 %64, i32 50
  %116 = insertelement <16 x i16> %115, i16 %64, i32 51
  %117 = insertelement <16 x i16> %116, i16 %64, i32 52
  %118 = insertelement <16 x i16> %117, i16 %64, i32 53
  %119 = insertelement <16 x i16> %118, i16 %64, i32 54
  %120 = insertelement <16 x i16> %119, i16 %64, i32 55
  %121 = bitcast <16 x i16> %120 to <8 x i32>
  %122 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %121)
  %123 = fmul <8 x float> undef, %122
  %124 = bitcast float* %47 to <4 x float>*
  %125 = bitcast <4 x float>* %46 to <8 x float>*
  store <8 x float> %123, <8 x float>* %125, align 16, !tbaa !2, !nontemporal !5
  %126 = shufflevector <16 x i8> %42, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %127 = getelementptr inbounds float, float* %39, i64 8
  %128 = bitcast <16 x i8> %126 to <8 x i16>
  %129 = shufflevector <8 x i16> %128, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %130 = bitcast float* %127 to <4 x float>*
  %131 = getelementptr inbounds float, float* %39, i64 12
  %132 = shufflevector <8 x i16> %128, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %133 = extractelement <8 x i16> %129, i32 0
  %134 = extractelement <8 x i16> %129, i32 1
  %135 = extractelement <8 x i16> %129, i32 2
  %136 = extractelement <8 x i16> %129, i32 3
  %137 = extractelement <8 x i16> %129, i32 4
  %138 = extractelement <8 x i16> %129, i32 5
  %139 = extractelement <8 x i16> %129, i32 6
  %140 = extractelement <8 x i16> %129, i32 7
  %141 = extractelement <8 x i16> %132, i32 0
  %142 = extractelement <8 x i16> %132, i32 1
  %143 = extractelement <8 x i16> %132, i32 2
  %144 = extractelement <8 x i16> %132, i32 3
  %145 = extractelement <8 x i16> %132, i32 4
  %146 = extractelement <8 x i16> %132, i32 5
  %147 = extractelement <8 x i16> %132, i32 6
  %148 = extractelement <8 x i16> %132, i32 7
  %149 = insertelement <16 x i16> undef, i16 %134, i32 0
  %150 = insertelement <16 x i16> %149, i16 %135, i32 1
  %151 = insertelement <16 x i16> %150, i16 %135, i32 2
  %152 = insertelement <16 x i16> %151, i16 %136, i32 3
  %153 = insertelement <16 x i16> %152, i16 %136, i32 4
  %154 = insertelement <16 x i16> %153, i16 %136, i32 5
  %155 = insertelement <16 x i16> %154, i16 %137, i32 6
  %156 = insertelement <16 x i16> %155, i16 %137, i32 7
  %157 = insertelement <16 x i16> %156, i16 %137, i32 8
  %158 = insertelement <16 x i16> %157, i16 %137, i32 9
  %159 = insertelement <16 x i16> %158, i16 %138, i32 10
  %160 = insertelement <16 x i16> %159, i16 %138, i32 11
  %161 = insertelement <16 x i16> %160, i16 %138, i32 12
  %162 = insertelement <16 x i16> %161, i16 %138, i32 13
  %163 = insertelement <16 x i16> %162, i16 %138, i32 14
  %164 = insertelement <16 x i16> %163, i16 %139, i32 15
  %165 = insertelement <16 x i16> %164, i16 %139, i32 16
  %166 = insertelement <16 x i16> %165, i16 %139, i32 17
  %167 = insertelement <16 x i16> %166, i16 %139, i32 18
  %168 = insertelement <16 x i16> %167, i16 %139, i32 19
  %169 = insertelement <16 x i16> %168, i16 %139, i32 20
  %170 = insertelement <16 x i16> %169, i16 %140, i32 21
  %171 = insertelement <16 x i16> %170, i16 %140, i32 22
  %172 = insertelement <16 x i16> %171, i16 %140, i32 23
  %173 = insertelement <16 x i16> %172, i16 %140, i32 24
  %174 = insertelement <16 x i16> %173, i16 %140, i32 25
  %175 = insertelement <16 x i16> %174, i16 %140, i32 26
  %176 = insertelement <16 x i16> %175, i16 %140, i32 27
  %177 = insertelement <16 x i16> %176, i16 %142, i32 28
  %178 = insertelement <16 x i16> %177, i16 %143, i32 29
  %179 = insertelement <16 x i16> %178, i16 %143, i32 30
  %180 = insertelement <16 x i16> %179, i16 %144, i32 31
  %181 = insertelement <16 x i16> %180, i16 %144, i32 32
  %182 = insertelement <16 x i16> %181, i16 %144, i32 33
  %183 = insertelement <16 x i16> %182, i16 %145, i32 34
  %184 = insertelement <16 x i16> %183, i16 %145, i32 35
  %185 = insertelement <16 x i16> %184, i16 %145, i32 36
  %186 = insertelement <16 x i16> %185, i16 %145, i32 37
  %187 = insertelement <16 x i16> %186, i16 %146, i32 38
  %188 = insertelement <16 x i16> %187, i16 %146, i32 39
  %189 = insertelement <16 x i16> %188, i16 %146, i32 40
  %190 = insertelement <16 x i16> %189, i16 %146, i32 41
  %191 = insertelement <16 x i16> %190, i16 %146, i32 42
  %192 = insertelement <16 x i16> %191, i16 %147, i32 43
  %193 = insertelement <16 x i16> %192, i16 %147, i32 44
  %194 = insertelement <16 x i16> %193, i16 %147, i32 45
  %195 = insertelement <16 x i16> %194, i16 %147, i32 46
  %196 = insertelement <16 x i16> %195, i16 %147, i32 47
  %197 = insertelement <16 x i16> %196, i16 %147, i32 48
  %198 = insertelement <16 x i16> %197, i16 %148, i32 49
  %199 = insertelement <16 x i16> %198, i16 %148, i32 50
  %200 = insertelement <16 x i16> %199, i16 %148, i32 51
  %201 = insertelement <16 x i16> %200, i16 %148, i32 52
  %202 = insertelement <16 x i16> %201, i16 %148, i32 53
  %203 = insertelement <16 x i16> %202, i16 %148, i32 54
  %204 = insertelement <16 x i16> %203, i16 %148, i32 55
  %205 = bitcast <16 x i16> %204 to <8 x i32>
  %206 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %205)
  %207 = fmul <8 x float> undef, %206
  %208 = bitcast float* %131 to <4 x float>*
  %209 = bitcast <4 x float>* %130 to <8 x float>*
  store <8 x float> %207, <8 x float>* %209, align 16, !tbaa !2, !nontemporal !5
  %210 = add nuw i64 %37, 16
  %211 = icmp ult i64 %210, %2
  br i1 %211, label %36, label %212

; <label>:212:                                    ; preds = %36
  %213 = getelementptr inbounds i8, i8* %34, i64 %1
  %214 = getelementptr inbounds float, float* %35, i64 %2
  %215 = add nuw i64 %33, 1
  %216 = icmp eq i64 %215, %3
  br i1 %216, label %217, label %32

; <label>:217:                                    ; preds = %212, %29
  tail call void @llvm.x86.sse2.mfence()
  br label %1146

; <label>:218:                                    ; preds = %22
  br i1 %26, label %220, label %219

; <label>:219:                                    ; preds = %218
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb1ELb0EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:220:                                    ; preds = %218
  %221 = icmp eq i64 %3, 0
  br i1 %221, label %1146, label %222

; <label>:222:                                    ; preds = %220
  br label %223

; <label>:223:                                    ; preds = %403, %222
  %224 = phi i64 [ %406, %403 ], [ 0, %222 ]
  %225 = phi i8* [ %404, %403 ], [ %0, %222 ]
  %226 = phi float* [ %405, %403 ], [ %4, %222 ]
  br label %227

; <label>:227:                                    ; preds = %227, %223
  %228 = phi i64 [ 0, %223 ], [ %401, %227 ]
  %229 = getelementptr inbounds i8, i8* %225, i64 %228
  %230 = getelementptr inbounds float, float* %226, i64 %228
  %231 = bitcast i8* %229 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 16, !tbaa !2
  %233 = xor <16 x i8> %232, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %234 = shufflevector <16 x i8> %233, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %235 = bitcast <16 x i8> %234 to <8 x i16>
  %236 = shufflevector <8 x i16> %235, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %237 = bitcast float* %230 to <4 x float>*
  %238 = getelementptr inbounds float, float* %230, i64 4
  %239 = shufflevector <8 x i16> %235, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %240 = extractelement <8 x i16> %236, i32 0
  %241 = extractelement <8 x i16> %236, i32 1
  %242 = extractelement <8 x i16> %236, i32 2
  %243 = extractelement <8 x i16> %236, i32 3
  %244 = extractelement <8 x i16> %236, i32 4
  %245 = extractelement <8 x i16> %236, i32 5
  %246 = extractelement <8 x i16> %236, i32 6
  %247 = extractelement <8 x i16> %236, i32 7
  %248 = extractelement <8 x i16> %239, i32 0
  %249 = extractelement <8 x i16> %239, i32 1
  %250 = extractelement <8 x i16> %239, i32 2
  %251 = extractelement <8 x i16> %239, i32 3
  %252 = extractelement <8 x i16> %239, i32 4
  %253 = extractelement <8 x i16> %239, i32 5
  %254 = extractelement <8 x i16> %239, i32 6
  %255 = extractelement <8 x i16> %239, i32 7
  %256 = insertelement <16 x i16> undef, i16 %241, i32 0
  %257 = insertelement <16 x i16> %256, i16 %242, i32 1
  %258 = insertelement <16 x i16> %257, i16 %242, i32 2
  %259 = insertelement <16 x i16> %258, i16 %243, i32 3
  %260 = insertelement <16 x i16> %259, i16 %243, i32 4
  %261 = insertelement <16 x i16> %260, i16 %243, i32 5
  %262 = insertelement <16 x i16> %261, i16 %244, i32 6
  %263 = insertelement <16 x i16> %262, i16 %244, i32 7
  %264 = insertelement <16 x i16> %263, i16 %244, i32 8
  %265 = insertelement <16 x i16> %264, i16 %244, i32 9
  %266 = insertelement <16 x i16> %265, i16 %245, i32 10
  %267 = insertelement <16 x i16> %266, i16 %245, i32 11
  %268 = insertelement <16 x i16> %267, i16 %245, i32 12
  %269 = insertelement <16 x i16> %268, i16 %245, i32 13
  %270 = insertelement <16 x i16> %269, i16 %245, i32 14
  %271 = insertelement <16 x i16> %270, i16 %246, i32 15
  %272 = insertelement <16 x i16> %271, i16 %246, i32 16
  %273 = insertelement <16 x i16> %272, i16 %246, i32 17
  %274 = insertelement <16 x i16> %273, i16 %246, i32 18
  %275 = insertelement <16 x i16> %274, i16 %246, i32 19
  %276 = insertelement <16 x i16> %275, i16 %246, i32 20
  %277 = insertelement <16 x i16> %276, i16 %247, i32 21
  %278 = insertelement <16 x i16> %277, i16 %247, i32 22
  %279 = insertelement <16 x i16> %278, i16 %247, i32 23
  %280 = insertelement <16 x i16> %279, i16 %247, i32 24
  %281 = insertelement <16 x i16> %280, i16 %247, i32 25
  %282 = insertelement <16 x i16> %281, i16 %247, i32 26
  %283 = insertelement <16 x i16> %282, i16 %247, i32 27
  %284 = insertelement <16 x i16> %283, i16 %249, i32 28
  %285 = insertelement <16 x i16> %284, i16 %250, i32 29
  %286 = insertelement <16 x i16> %285, i16 %250, i32 30
  %287 = insertelement <16 x i16> %286, i16 %251, i32 31
  %288 = insertelement <16 x i16> %287, i16 %251, i32 32
  %289 = insertelement <16 x i16> %288, i16 %251, i32 33
  %290 = insertelement <16 x i16> %289, i16 %252, i32 34
  %291 = insertelement <16 x i16> %290, i16 %252, i32 35
  %292 = insertelement <16 x i16> %291, i16 %252, i32 36
  %293 = insertelement <16 x i16> %292, i16 %252, i32 37
  %294 = insertelement <16 x i16> %293, i16 %253, i32 38
  %295 = insertelement <16 x i16> %294, i16 %253, i32 39
  %296 = insertelement <16 x i16> %295, i16 %253, i32 40
  %297 = insertelement <16 x i16> %296, i16 %253, i32 41
  %298 = insertelement <16 x i16> %297, i16 %253, i32 42
  %299 = insertelement <16 x i16> %298, i16 %254, i32 43
  %300 = insertelement <16 x i16> %299, i16 %254, i32 44
  %301 = insertelement <16 x i16> %300, i16 %254, i32 45
  %302 = insertelement <16 x i16> %301, i16 %254, i32 46
  %303 = insertelement <16 x i16> %302, i16 %254, i32 47
  %304 = insertelement <16 x i16> %303, i16 %254, i32 48
  %305 = insertelement <16 x i16> %304, i16 %255, i32 49
  %306 = insertelement <16 x i16> %305, i16 %255, i32 50
  %307 = insertelement <16 x i16> %306, i16 %255, i32 51
  %308 = insertelement <16 x i16> %307, i16 %255, i32 52
  %309 = insertelement <16 x i16> %308, i16 %255, i32 53
  %310 = insertelement <16 x i16> %309, i16 %255, i32 54
  %311 = insertelement <16 x i16> %310, i16 %255, i32 55
  %312 = bitcast <16 x i16> %311 to <8 x i32>
  %313 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %312)
  %314 = fmul <8 x float> undef, %313
  %315 = bitcast float* %238 to <4 x float>*
  %316 = bitcast <4 x float>* %237 to <8 x float>*
  store <8 x float> %314, <8 x float>* %316, align 16, !tbaa !2
  %317 = shufflevector <16 x i8> %233, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %318 = getelementptr inbounds float, float* %230, i64 8
  %319 = bitcast <16 x i8> %317 to <8 x i16>
  %320 = shufflevector <8 x i16> %319, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %321 = bitcast float* %318 to <4 x float>*
  %322 = getelementptr inbounds float, float* %230, i64 12
  %323 = shufflevector <8 x i16> %319, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %324 = extractelement <8 x i16> %320, i32 0
  %325 = extractelement <8 x i16> %320, i32 1
  %326 = extractelement <8 x i16> %320, i32 2
  %327 = extractelement <8 x i16> %320, i32 3
  %328 = extractelement <8 x i16> %320, i32 4
  %329 = extractelement <8 x i16> %320, i32 5
  %330 = extractelement <8 x i16> %320, i32 6
  %331 = extractelement <8 x i16> %320, i32 7
  %332 = extractelement <8 x i16> %323, i32 0
  %333 = extractelement <8 x i16> %323, i32 1
  %334 = extractelement <8 x i16> %323, i32 2
  %335 = extractelement <8 x i16> %323, i32 3
  %336 = extractelement <8 x i16> %323, i32 4
  %337 = extractelement <8 x i16> %323, i32 5
  %338 = extractelement <8 x i16> %323, i32 6
  %339 = extractelement <8 x i16> %323, i32 7
  %340 = insertelement <16 x i16> undef, i16 %325, i32 0
  %341 = insertelement <16 x i16> %340, i16 %326, i32 1
  %342 = insertelement <16 x i16> %341, i16 %326, i32 2
  %343 = insertelement <16 x i16> %342, i16 %327, i32 3
  %344 = insertelement <16 x i16> %343, i16 %327, i32 4
  %345 = insertelement <16 x i16> %344, i16 %327, i32 5
  %346 = insertelement <16 x i16> %345, i16 %328, i32 6
  %347 = insertelement <16 x i16> %346, i16 %328, i32 7
  %348 = insertelement <16 x i16> %347, i16 %328, i32 8
  %349 = insertelement <16 x i16> %348, i16 %328, i32 9
  %350 = insertelement <16 x i16> %349, i16 %329, i32 10
  %351 = insertelement <16 x i16> %350, i16 %329, i32 11
  %352 = insertelement <16 x i16> %351, i16 %329, i32 12
  %353 = insertelement <16 x i16> %352, i16 %329, i32 13
  %354 = insertelement <16 x i16> %353, i16 %329, i32 14
  %355 = insertelement <16 x i16> %354, i16 %330, i32 15
  %356 = insertelement <16 x i16> %355, i16 %330, i32 16
  %357 = insertelement <16 x i16> %356, i16 %330, i32 17
  %358 = insertelement <16 x i16> %357, i16 %330, i32 18
  %359 = insertelement <16 x i16> %358, i16 %330, i32 19
  %360 = insertelement <16 x i16> %359, i16 %330, i32 20
  %361 = insertelement <16 x i16> %360, i16 %331, i32 21
  %362 = insertelement <16 x i16> %361, i16 %331, i32 22
  %363 = insertelement <16 x i16> %362, i16 %331, i32 23
  %364 = insertelement <16 x i16> %363, i16 %331, i32 24
  %365 = insertelement <16 x i16> %364, i16 %331, i32 25
  %366 = insertelement <16 x i16> %365, i16 %331, i32 26
  %367 = insertelement <16 x i16> %366, i16 %331, i32 27
  %368 = insertelement <16 x i16> %367, i16 %333, i32 28
  %369 = insertelement <16 x i16> %368, i16 %334, i32 29
  %370 = insertelement <16 x i16> %369, i16 %334, i32 30
  %371 = insertelement <16 x i16> %370, i16 %335, i32 31
  %372 = insertelement <16 x i16> %371, i16 %335, i32 32
  %373 = insertelement <16 x i16> %372, i16 %335, i32 33
  %374 = insertelement <16 x i16> %373, i16 %336, i32 34
  %375 = insertelement <16 x i16> %374, i16 %336, i32 35
  %376 = insertelement <16 x i16> %375, i16 %336, i32 36
  %377 = insertelement <16 x i16> %376, i16 %336, i32 37
  %378 = insertelement <16 x i16> %377, i16 %337, i32 38
  %379 = insertelement <16 x i16> %378, i16 %337, i32 39
  %380 = insertelement <16 x i16> %379, i16 %337, i32 40
  %381 = insertelement <16 x i16> %380, i16 %337, i32 41
  %382 = insertelement <16 x i16> %381, i16 %337, i32 42
  %383 = insertelement <16 x i16> %382, i16 %338, i32 43
  %384 = insertelement <16 x i16> %383, i16 %338, i32 44
  %385 = insertelement <16 x i16> %384, i16 %338, i32 45
  %386 = insertelement <16 x i16> %385, i16 %338, i32 46
  %387 = insertelement <16 x i16> %386, i16 %338, i32 47
  %388 = insertelement <16 x i16> %387, i16 %338, i32 48
  %389 = insertelement <16 x i16> %388, i16 %339, i32 49
  %390 = insertelement <16 x i16> %389, i16 %339, i32 50
  %391 = insertelement <16 x i16> %390, i16 %339, i32 51
  %392 = insertelement <16 x i16> %391, i16 %339, i32 52
  %393 = insertelement <16 x i16> %392, i16 %339, i32 53
  %394 = insertelement <16 x i16> %393, i16 %339, i32 54
  %395 = insertelement <16 x i16> %394, i16 %339, i32 55
  %396 = bitcast <16 x i16> %395 to <8 x i32>
  %397 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %396)
  %398 = fmul <8 x float> undef, %397
  %399 = bitcast float* %322 to <4 x float>*
  %400 = bitcast <4 x float>* %321 to <8 x float>*
  store <8 x float> %398, <8 x float>* %400, align 16, !tbaa !2
  %401 = add nuw i64 %228, 16
  %402 = icmp ult i64 %401, %2
  br i1 %402, label %227, label %403

; <label>:403:                                    ; preds = %227
  %404 = getelementptr inbounds i8, i8* %225, i64 %1
  %405 = getelementptr inbounds float, float* %226, i64 %2
  %406 = add nuw i64 %224, 1
  %407 = icmp eq i64 %406, %3
  br i1 %407, label %1146, label %223

; <label>:408:                                    ; preds = %13, %5
  %409 = icmp ugt i64 %2, 15
  br i1 %409, label %411, label %410

; <label>:410:                                    ; preds = %408
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb1ELb0ELb0EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:411:                                    ; preds = %408
  %412 = and i64 %2, -16
  %413 = icmp eq i64 %3, 0
  br i1 %413, label %1146, label %414

; <label>:414:                                    ; preds = %411
  %415 = icmp eq i64 %412, 0
  %416 = icmp eq i64 %412, %2
  br i1 %415, label %963, label %417

; <label>:417:                                    ; preds = %414
  br i1 %416, label %419, label %418

; <label>:418:                                    ; preds = %417
  br label %605

; <label>:419:                                    ; preds = %417
  br label %420

; <label>:420:                                    ; preds = %600, %419
  %421 = phi i64 [ %603, %600 ], [ 0, %419 ]
  %422 = phi i8* [ %602, %600 ], [ %0, %419 ]
  %423 = phi float* [ %601, %600 ], [ %4, %419 ]
  br label %424

; <label>:424:                                    ; preds = %424, %420
  %425 = phi i64 [ 0, %420 ], [ %598, %424 ]
  %426 = getelementptr inbounds i8, i8* %422, i64 %425
  %427 = getelementptr inbounds float, float* %423, i64 %425
  %428 = bitcast i8* %426 to <16 x i8>*
  %429 = load <16 x i8>, <16 x i8>* %428, align 1, !tbaa !2
  %430 = xor <16 x i8> %429, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %431 = shufflevector <16 x i8> %430, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %432 = bitcast <16 x i8> %431 to <8 x i16>
  %433 = shufflevector <8 x i16> %432, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %434 = bitcast float* %427 to <4 x float>*
  %435 = getelementptr inbounds float, float* %427, i64 4
  %436 = shufflevector <8 x i16> %432, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %437 = extractelement <8 x i16> %433, i32 0
  %438 = extractelement <8 x i16> %433, i32 1
  %439 = extractelement <8 x i16> %433, i32 2
  %440 = extractelement <8 x i16> %433, i32 3
  %441 = extractelement <8 x i16> %433, i32 4
  %442 = extractelement <8 x i16> %433, i32 5
  %443 = extractelement <8 x i16> %433, i32 6
  %444 = extractelement <8 x i16> %433, i32 7
  %445 = extractelement <8 x i16> %436, i32 0
  %446 = extractelement <8 x i16> %436, i32 1
  %447 = extractelement <8 x i16> %436, i32 2
  %448 = extractelement <8 x i16> %436, i32 3
  %449 = extractelement <8 x i16> %436, i32 4
  %450 = extractelement <8 x i16> %436, i32 5
  %451 = extractelement <8 x i16> %436, i32 6
  %452 = extractelement <8 x i16> %436, i32 7
  %453 = insertelement <16 x i16> undef, i16 %438, i32 0
  %454 = insertelement <16 x i16> %453, i16 %439, i32 1
  %455 = insertelement <16 x i16> %454, i16 %439, i32 2
  %456 = insertelement <16 x i16> %455, i16 %440, i32 3
  %457 = insertelement <16 x i16> %456, i16 %440, i32 4
  %458 = insertelement <16 x i16> %457, i16 %440, i32 5
  %459 = insertelement <16 x i16> %458, i16 %441, i32 6
  %460 = insertelement <16 x i16> %459, i16 %441, i32 7
  %461 = insertelement <16 x i16> %460, i16 %441, i32 8
  %462 = insertelement <16 x i16> %461, i16 %441, i32 9
  %463 = insertelement <16 x i16> %462, i16 %442, i32 10
  %464 = insertelement <16 x i16> %463, i16 %442, i32 11
  %465 = insertelement <16 x i16> %464, i16 %442, i32 12
  %466 = insertelement <16 x i16> %465, i16 %442, i32 13
  %467 = insertelement <16 x i16> %466, i16 %442, i32 14
  %468 = insertelement <16 x i16> %467, i16 %443, i32 15
  %469 = insertelement <16 x i16> %468, i16 %443, i32 16
  %470 = insertelement <16 x i16> %469, i16 %443, i32 17
  %471 = insertelement <16 x i16> %470, i16 %443, i32 18
  %472 = insertelement <16 x i16> %471, i16 %443, i32 19
  %473 = insertelement <16 x i16> %472, i16 %443, i32 20
  %474 = insertelement <16 x i16> %473, i16 %444, i32 21
  %475 = insertelement <16 x i16> %474, i16 %444, i32 22
  %476 = insertelement <16 x i16> %475, i16 %444, i32 23
  %477 = insertelement <16 x i16> %476, i16 %444, i32 24
  %478 = insertelement <16 x i16> %477, i16 %444, i32 25
  %479 = insertelement <16 x i16> %478, i16 %444, i32 26
  %480 = insertelement <16 x i16> %479, i16 %444, i32 27
  %481 = insertelement <16 x i16> %480, i16 %446, i32 28
  %482 = insertelement <16 x i16> %481, i16 %447, i32 29
  %483 = insertelement <16 x i16> %482, i16 %447, i32 30
  %484 = insertelement <16 x i16> %483, i16 %448, i32 31
  %485 = insertelement <16 x i16> %484, i16 %448, i32 32
  %486 = insertelement <16 x i16> %485, i16 %448, i32 33
  %487 = insertelement <16 x i16> %486, i16 %449, i32 34
  %488 = insertelement <16 x i16> %487, i16 %449, i32 35
  %489 = insertelement <16 x i16> %488, i16 %449, i32 36
  %490 = insertelement <16 x i16> %489, i16 %449, i32 37
  %491 = insertelement <16 x i16> %490, i16 %450, i32 38
  %492 = insertelement <16 x i16> %491, i16 %450, i32 39
  %493 = insertelement <16 x i16> %492, i16 %450, i32 40
  %494 = insertelement <16 x i16> %493, i16 %450, i32 41
  %495 = insertelement <16 x i16> %494, i16 %450, i32 42
  %496 = insertelement <16 x i16> %495, i16 %451, i32 43
  %497 = insertelement <16 x i16> %496, i16 %451, i32 44
  %498 = insertelement <16 x i16> %497, i16 %451, i32 45
  %499 = insertelement <16 x i16> %498, i16 %451, i32 46
  %500 = insertelement <16 x i16> %499, i16 %451, i32 47
  %501 = insertelement <16 x i16> %500, i16 %451, i32 48
  %502 = insertelement <16 x i16> %501, i16 %452, i32 49
  %503 = insertelement <16 x i16> %502, i16 %452, i32 50
  %504 = insertelement <16 x i16> %503, i16 %452, i32 51
  %505 = insertelement <16 x i16> %504, i16 %452, i32 52
  %506 = insertelement <16 x i16> %505, i16 %452, i32 53
  %507 = insertelement <16 x i16> %506, i16 %452, i32 54
  %508 = insertelement <16 x i16> %507, i16 %452, i32 55
  %509 = bitcast <16 x i16> %508 to <8 x i32>
  %510 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %509)
  %511 = fmul <8 x float> undef, %510
  %512 = bitcast float* %435 to <4 x float>*
  %513 = bitcast <4 x float>* %434 to <8 x float>*
  store <8 x float> %511, <8 x float>* %513, align 1, !tbaa !2
  %514 = shufflevector <16 x i8> %430, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %515 = getelementptr inbounds float, float* %427, i64 8
  %516 = bitcast <16 x i8> %514 to <8 x i16>
  %517 = shufflevector <8 x i16> %516, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %518 = bitcast float* %515 to <4 x float>*
  %519 = getelementptr inbounds float, float* %427, i64 12
  %520 = shufflevector <8 x i16> %516, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %521 = extractelement <8 x i16> %517, i32 0
  %522 = extractelement <8 x i16> %517, i32 1
  %523 = extractelement <8 x i16> %517, i32 2
  %524 = extractelement <8 x i16> %517, i32 3
  %525 = extractelement <8 x i16> %517, i32 4
  %526 = extractelement <8 x i16> %517, i32 5
  %527 = extractelement <8 x i16> %517, i32 6
  %528 = extractelement <8 x i16> %517, i32 7
  %529 = extractelement <8 x i16> %520, i32 0
  %530 = extractelement <8 x i16> %520, i32 1
  %531 = extractelement <8 x i16> %520, i32 2
  %532 = extractelement <8 x i16> %520, i32 3
  %533 = extractelement <8 x i16> %520, i32 4
  %534 = extractelement <8 x i16> %520, i32 5
  %535 = extractelement <8 x i16> %520, i32 6
  %536 = extractelement <8 x i16> %520, i32 7
  %537 = insertelement <16 x i16> undef, i16 %522, i32 0
  %538 = insertelement <16 x i16> %537, i16 %523, i32 1
  %539 = insertelement <16 x i16> %538, i16 %523, i32 2
  %540 = insertelement <16 x i16> %539, i16 %524, i32 3
  %541 = insertelement <16 x i16> %540, i16 %524, i32 4
  %542 = insertelement <16 x i16> %541, i16 %524, i32 5
  %543 = insertelement <16 x i16> %542, i16 %525, i32 6
  %544 = insertelement <16 x i16> %543, i16 %525, i32 7
  %545 = insertelement <16 x i16> %544, i16 %525, i32 8
  %546 = insertelement <16 x i16> %545, i16 %525, i32 9
  %547 = insertelement <16 x i16> %546, i16 %526, i32 10
  %548 = insertelement <16 x i16> %547, i16 %526, i32 11
  %549 = insertelement <16 x i16> %548, i16 %526, i32 12
  %550 = insertelement <16 x i16> %549, i16 %526, i32 13
  %551 = insertelement <16 x i16> %550, i16 %526, i32 14
  %552 = insertelement <16 x i16> %551, i16 %527, i32 15
  %553 = insertelement <16 x i16> %552, i16 %527, i32 16
  %554 = insertelement <16 x i16> %553, i16 %527, i32 17
  %555 = insertelement <16 x i16> %554, i16 %527, i32 18
  %556 = insertelement <16 x i16> %555, i16 %527, i32 19
  %557 = insertelement <16 x i16> %556, i16 %527, i32 20
  %558 = insertelement <16 x i16> %557, i16 %528, i32 21
  %559 = insertelement <16 x i16> %558, i16 %528, i32 22
  %560 = insertelement <16 x i16> %559, i16 %528, i32 23
  %561 = insertelement <16 x i16> %560, i16 %528, i32 24
  %562 = insertelement <16 x i16> %561, i16 %528, i32 25
  %563 = insertelement <16 x i16> %562, i16 %528, i32 26
  %564 = insertelement <16 x i16> %563, i16 %528, i32 27
  %565 = insertelement <16 x i16> %564, i16 %530, i32 28
  %566 = insertelement <16 x i16> %565, i16 %531, i32 29
  %567 = insertelement <16 x i16> %566, i16 %531, i32 30
  %568 = insertelement <16 x i16> %567, i16 %532, i32 31
  %569 = insertelement <16 x i16> %568, i16 %532, i32 32
  %570 = insertelement <16 x i16> %569, i16 %532, i32 33
  %571 = insertelement <16 x i16> %570, i16 %533, i32 34
  %572 = insertelement <16 x i16> %571, i16 %533, i32 35
  %573 = insertelement <16 x i16> %572, i16 %533, i32 36
  %574 = insertelement <16 x i16> %573, i16 %533, i32 37
  %575 = insertelement <16 x i16> %574, i16 %534, i32 38
  %576 = insertelement <16 x i16> %575, i16 %534, i32 39
  %577 = insertelement <16 x i16> %576, i16 %534, i32 40
  %578 = insertelement <16 x i16> %577, i16 %534, i32 41
  %579 = insertelement <16 x i16> %578, i16 %534, i32 42
  %580 = insertelement <16 x i16> %579, i16 %535, i32 43
  %581 = insertelement <16 x i16> %580, i16 %535, i32 44
  %582 = insertelement <16 x i16> %581, i16 %535, i32 45
  %583 = insertelement <16 x i16> %582, i16 %535, i32 46
  %584 = insertelement <16 x i16> %583, i16 %535, i32 47
  %585 = insertelement <16 x i16> %584, i16 %535, i32 48
  %586 = insertelement <16 x i16> %585, i16 %536, i32 49
  %587 = insertelement <16 x i16> %586, i16 %536, i32 50
  %588 = insertelement <16 x i16> %587, i16 %536, i32 51
  %589 = insertelement <16 x i16> %588, i16 %536, i32 52
  %590 = insertelement <16 x i16> %589, i16 %536, i32 53
  %591 = insertelement <16 x i16> %590, i16 %536, i32 54
  %592 = insertelement <16 x i16> %591, i16 %536, i32 55
  %593 = bitcast <16 x i16> %592 to <8 x i32>
  %594 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %593)
  %595 = fmul <8 x float> undef, %594
  %596 = bitcast float* %519 to <4 x float>*
  %597 = bitcast <4 x float>* %518 to <8 x float>*
  store <8 x float> %595, <8 x float>* %597, align 1, !tbaa !2
  %598 = add nuw i64 %425, 16
  %599 = icmp ult i64 %598, %2
  br i1 %599, label %424, label %600

; <label>:600:                                    ; preds = %424
  %601 = getelementptr inbounds float, float* %423, i64 %2
  %602 = getelementptr inbounds i8, i8* %422, i64 %1
  %603 = add nuw i64 %421, 1
  %604 = icmp eq i64 %603, %3
  br i1 %604, label %1146, label %420

; <label>:605:                                    ; preds = %785, %418
  %606 = phi i64 [ %961, %785 ], [ 0, %418 ]
  %607 = phi i8* [ %960, %785 ], [ %0, %418 ]
  %608 = phi float* [ %788, %785 ], [ %4, %418 ]
  br label %609

; <label>:609:                                    ; preds = %609, %605
  %610 = phi i64 [ 0, %605 ], [ %783, %609 ]
  %611 = getelementptr inbounds i8, i8* %607, i64 %610
  %612 = getelementptr inbounds float, float* %608, i64 %610
  %613 = bitcast i8* %611 to <16 x i8>*
  %614 = load <16 x i8>, <16 x i8>* %613, align 1, !tbaa !2
  %615 = xor <16 x i8> %614, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %616 = shufflevector <16 x i8> %615, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %617 = bitcast <16 x i8> %616 to <8 x i16>
  %618 = shufflevector <8 x i16> %617, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %619 = bitcast float* %612 to <4 x float>*
  %620 = getelementptr inbounds float, float* %612, i64 4
  %621 = shufflevector <8 x i16> %617, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %622 = extractelement <8 x i16> %618, i32 0
  %623 = extractelement <8 x i16> %618, i32 1
  %624 = extractelement <8 x i16> %618, i32 2
  %625 = extractelement <8 x i16> %618, i32 3
  %626 = extractelement <8 x i16> %618, i32 4
  %627 = extractelement <8 x i16> %618, i32 5
  %628 = extractelement <8 x i16> %618, i32 6
  %629 = extractelement <8 x i16> %618, i32 7
  %630 = extractelement <8 x i16> %621, i32 0
  %631 = extractelement <8 x i16> %621, i32 1
  %632 = extractelement <8 x i16> %621, i32 2
  %633 = extractelement <8 x i16> %621, i32 3
  %634 = extractelement <8 x i16> %621, i32 4
  %635 = extractelement <8 x i16> %621, i32 5
  %636 = extractelement <8 x i16> %621, i32 6
  %637 = extractelement <8 x i16> %621, i32 7
  %638 = insertelement <16 x i16> undef, i16 %623, i32 0
  %639 = insertelement <16 x i16> %638, i16 %624, i32 1
  %640 = insertelement <16 x i16> %639, i16 %624, i32 2
  %641 = insertelement <16 x i16> %640, i16 %625, i32 3
  %642 = insertelement <16 x i16> %641, i16 %625, i32 4
  %643 = insertelement <16 x i16> %642, i16 %625, i32 5
  %644 = insertelement <16 x i16> %643, i16 %626, i32 6
  %645 = insertelement <16 x i16> %644, i16 %626, i32 7
  %646 = insertelement <16 x i16> %645, i16 %626, i32 8
  %647 = insertelement <16 x i16> %646, i16 %626, i32 9
  %648 = insertelement <16 x i16> %647, i16 %627, i32 10
  %649 = insertelement <16 x i16> %648, i16 %627, i32 11
  %650 = insertelement <16 x i16> %649, i16 %627, i32 12
  %651 = insertelement <16 x i16> %650, i16 %627, i32 13
  %652 = insertelement <16 x i16> %651, i16 %627, i32 14
  %653 = insertelement <16 x i16> %652, i16 %628, i32 15
  %654 = insertelement <16 x i16> %653, i16 %628, i32 16
  %655 = insertelement <16 x i16> %654, i16 %628, i32 17
  %656 = insertelement <16 x i16> %655, i16 %628, i32 18
  %657 = insertelement <16 x i16> %656, i16 %628, i32 19
  %658 = insertelement <16 x i16> %657, i16 %628, i32 20
  %659 = insertelement <16 x i16> %658, i16 %629, i32 21
  %660 = insertelement <16 x i16> %659, i16 %629, i32 22
  %661 = insertelement <16 x i16> %660, i16 %629, i32 23
  %662 = insertelement <16 x i16> %661, i16 %629, i32 24
  %663 = insertelement <16 x i16> %662, i16 %629, i32 25
  %664 = insertelement <16 x i16> %663, i16 %629, i32 26
  %665 = insertelement <16 x i16> %664, i16 %629, i32 27
  %666 = insertelement <16 x i16> %665, i16 %631, i32 28
  %667 = insertelement <16 x i16> %666, i16 %632, i32 29
  %668 = insertelement <16 x i16> %667, i16 %632, i32 30
  %669 = insertelement <16 x i16> %668, i16 %633, i32 31
  %670 = insertelement <16 x i16> %669, i16 %633, i32 32
  %671 = insertelement <16 x i16> %670, i16 %633, i32 33
  %672 = insertelement <16 x i16> %671, i16 %634, i32 34
  %673 = insertelement <16 x i16> %672, i16 %634, i32 35
  %674 = insertelement <16 x i16> %673, i16 %634, i32 36
  %675 = insertelement <16 x i16> %674, i16 %634, i32 37
  %676 = insertelement <16 x i16> %675, i16 %635, i32 38
  %677 = insertelement <16 x i16> %676, i16 %635, i32 39
  %678 = insertelement <16 x i16> %677, i16 %635, i32 40
  %679 = insertelement <16 x i16> %678, i16 %635, i32 41
  %680 = insertelement <16 x i16> %679, i16 %635, i32 42
  %681 = insertelement <16 x i16> %680, i16 %636, i32 43
  %682 = insertelement <16 x i16> %681, i16 %636, i32 44
  %683 = insertelement <16 x i16> %682, i16 %636, i32 45
  %684 = insertelement <16 x i16> %683, i16 %636, i32 46
  %685 = insertelement <16 x i16> %684, i16 %636, i32 47
  %686 = insertelement <16 x i16> %685, i16 %636, i32 48
  %687 = insertelement <16 x i16> %686, i16 %637, i32 49
  %688 = insertelement <16 x i16> %687, i16 %637, i32 50
  %689 = insertelement <16 x i16> %688, i16 %637, i32 51
  %690 = insertelement <16 x i16> %689, i16 %637, i32 52
  %691 = insertelement <16 x i16> %690, i16 %637, i32 53
  %692 = insertelement <16 x i16> %691, i16 %637, i32 54
  %693 = insertelement <16 x i16> %692, i16 %637, i32 55
  %694 = bitcast <16 x i16> %693 to <8 x i32>
  %695 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %694)
  %696 = fmul <8 x float> undef, %695
  %697 = bitcast float* %620 to <4 x float>*
  %698 = bitcast <4 x float>* %619 to <8 x float>*
  store <8 x float> %696, <8 x float>* %698, align 1, !tbaa !2
  %699 = shufflevector <16 x i8> %615, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %700 = getelementptr inbounds float, float* %612, i64 8
  %701 = bitcast <16 x i8> %699 to <8 x i16>
  %702 = shufflevector <8 x i16> %701, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %703 = bitcast float* %700 to <4 x float>*
  %704 = getelementptr inbounds float, float* %612, i64 12
  %705 = shufflevector <8 x i16> %701, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %706 = extractelement <8 x i16> %702, i32 0
  %707 = extractelement <8 x i16> %702, i32 1
  %708 = extractelement <8 x i16> %702, i32 2
  %709 = extractelement <8 x i16> %702, i32 3
  %710 = extractelement <8 x i16> %702, i32 4
  %711 = extractelement <8 x i16> %702, i32 5
  %712 = extractelement <8 x i16> %702, i32 6
  %713 = extractelement <8 x i16> %702, i32 7
  %714 = extractelement <8 x i16> %705, i32 0
  %715 = extractelement <8 x i16> %705, i32 1
  %716 = extractelement <8 x i16> %705, i32 2
  %717 = extractelement <8 x i16> %705, i32 3
  %718 = extractelement <8 x i16> %705, i32 4
  %719 = extractelement <8 x i16> %705, i32 5
  %720 = extractelement <8 x i16> %705, i32 6
  %721 = extractelement <8 x i16> %705, i32 7
  %722 = insertelement <16 x i16> undef, i16 %707, i32 0
  %723 = insertelement <16 x i16> %722, i16 %708, i32 1
  %724 = insertelement <16 x i16> %723, i16 %708, i32 2
  %725 = insertelement <16 x i16> %724, i16 %709, i32 3
  %726 = insertelement <16 x i16> %725, i16 %709, i32 4
  %727 = insertelement <16 x i16> %726, i16 %709, i32 5
  %728 = insertelement <16 x i16> %727, i16 %710, i32 6
  %729 = insertelement <16 x i16> %728, i16 %710, i32 7
  %730 = insertelement <16 x i16> %729, i16 %710, i32 8
  %731 = insertelement <16 x i16> %730, i16 %710, i32 9
  %732 = insertelement <16 x i16> %731, i16 %711, i32 10
  %733 = insertelement <16 x i16> %732, i16 %711, i32 11
  %734 = insertelement <16 x i16> %733, i16 %711, i32 12
  %735 = insertelement <16 x i16> %734, i16 %711, i32 13
  %736 = insertelement <16 x i16> %735, i16 %711, i32 14
  %737 = insertelement <16 x i16> %736, i16 %712, i32 15
  %738 = insertelement <16 x i16> %737, i16 %712, i32 16
  %739 = insertelement <16 x i16> %738, i16 %712, i32 17
  %740 = insertelement <16 x i16> %739, i16 %712, i32 18
  %741 = insertelement <16 x i16> %740, i16 %712, i32 19
  %742 = insertelement <16 x i16> %741, i16 %712, i32 20
  %743 = insertelement <16 x i16> %742, i16 %713, i32 21
  %744 = insertelement <16 x i16> %743, i16 %713, i32 22
  %745 = insertelement <16 x i16> %744, i16 %713, i32 23
  %746 = insertelement <16 x i16> %745, i16 %713, i32 24
  %747 = insertelement <16 x i16> %746, i16 %713, i32 25
  %748 = insertelement <16 x i16> %747, i16 %713, i32 26
  %749 = insertelement <16 x i16> %748, i16 %713, i32 27
  %750 = insertelement <16 x i16> %749, i16 %715, i32 28
  %751 = insertelement <16 x i16> %750, i16 %716, i32 29
  %752 = insertelement <16 x i16> %751, i16 %716, i32 30
  %753 = insertelement <16 x i16> %752, i16 %717, i32 31
  %754 = insertelement <16 x i16> %753, i16 %717, i32 32
  %755 = insertelement <16 x i16> %754, i16 %717, i32 33
  %756 = insertelement <16 x i16> %755, i16 %718, i32 34
  %757 = insertelement <16 x i16> %756, i16 %718, i32 35
  %758 = insertelement <16 x i16> %757, i16 %718, i32 36
  %759 = insertelement <16 x i16> %758, i16 %718, i32 37
  %760 = insertelement <16 x i16> %759, i16 %719, i32 38
  %761 = insertelement <16 x i16> %760, i16 %719, i32 39
  %762 = insertelement <16 x i16> %761, i16 %719, i32 40
  %763 = insertelement <16 x i16> %762, i16 %719, i32 41
  %764 = insertelement <16 x i16> %763, i16 %719, i32 42
  %765 = insertelement <16 x i16> %764, i16 %720, i32 43
  %766 = insertelement <16 x i16> %765, i16 %720, i32 44
  %767 = insertelement <16 x i16> %766, i16 %720, i32 45
  %768 = insertelement <16 x i16> %767, i16 %720, i32 46
  %769 = insertelement <16 x i16> %768, i16 %720, i32 47
  %770 = insertelement <16 x i16> %769, i16 %720, i32 48
  %771 = insertelement <16 x i16> %770, i16 %721, i32 49
  %772 = insertelement <16 x i16> %771, i16 %721, i32 50
  %773 = insertelement <16 x i16> %772, i16 %721, i32 51
  %774 = insertelement <16 x i16> %773, i16 %721, i32 52
  %775 = insertelement <16 x i16> %774, i16 %721, i32 53
  %776 = insertelement <16 x i16> %775, i16 %721, i32 54
  %777 = insertelement <16 x i16> %776, i16 %721, i32 55
  %778 = bitcast <16 x i16> %777 to <8 x i32>
  %779 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %778)
  %780 = fmul <8 x float> undef, %779
  %781 = bitcast float* %704 to <4 x float>*
  %782 = bitcast <4 x float>* %703 to <8 x float>*
  store <8 x float> %780, <8 x float>* %782, align 1, !tbaa !2
  %783 = add nuw i64 %610, 16
  %784 = icmp ult i64 %783, %412
  br i1 %784, label %609, label %785

; <label>:785:                                    ; preds = %609
  %786 = getelementptr inbounds i8, i8* %607, i64 %2
  %787 = getelementptr inbounds i8, i8* %786, i64 -16
  %788 = getelementptr inbounds float, float* %608, i64 %2
  %789 = getelementptr inbounds float, float* %788, i64 -16
  %790 = bitcast i8* %787 to <16 x i8>*
  %791 = load <16 x i8>, <16 x i8>* %790, align 1, !tbaa !2
  %792 = xor <16 x i8> %791, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %793 = shufflevector <16 x i8> %792, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %794 = bitcast <16 x i8> %793 to <8 x i16>
  %795 = shufflevector <8 x i16> %794, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %796 = bitcast float* %789 to <4 x float>*
  %797 = getelementptr inbounds float, float* %789, i64 4
  %798 = shufflevector <8 x i16> %794, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %799 = extractelement <8 x i16> %795, i32 0
  %800 = extractelement <8 x i16> %795, i32 1
  %801 = extractelement <8 x i16> %795, i32 2
  %802 = extractelement <8 x i16> %795, i32 3
  %803 = extractelement <8 x i16> %795, i32 4
  %804 = extractelement <8 x i16> %795, i32 5
  %805 = extractelement <8 x i16> %795, i32 6
  %806 = extractelement <8 x i16> %795, i32 7
  %807 = extractelement <8 x i16> %798, i32 0
  %808 = extractelement <8 x i16> %798, i32 1
  %809 = extractelement <8 x i16> %798, i32 2
  %810 = extractelement <8 x i16> %798, i32 3
  %811 = extractelement <8 x i16> %798, i32 4
  %812 = extractelement <8 x i16> %798, i32 5
  %813 = extractelement <8 x i16> %798, i32 6
  %814 = extractelement <8 x i16> %798, i32 7
  %815 = insertelement <16 x i16> undef, i16 %800, i32 0
  %816 = insertelement <16 x i16> %815, i16 %801, i32 1
  %817 = insertelement <16 x i16> %816, i16 %801, i32 2
  %818 = insertelement <16 x i16> %817, i16 %802, i32 3
  %819 = insertelement <16 x i16> %818, i16 %802, i32 4
  %820 = insertelement <16 x i16> %819, i16 %802, i32 5
  %821 = insertelement <16 x i16> %820, i16 %803, i32 6
  %822 = insertelement <16 x i16> %821, i16 %803, i32 7
  %823 = insertelement <16 x i16> %822, i16 %803, i32 8
  %824 = insertelement <16 x i16> %823, i16 %803, i32 9
  %825 = insertelement <16 x i16> %824, i16 %804, i32 10
  %826 = insertelement <16 x i16> %825, i16 %804, i32 11
  %827 = insertelement <16 x i16> %826, i16 %804, i32 12
  %828 = insertelement <16 x i16> %827, i16 %804, i32 13
  %829 = insertelement <16 x i16> %828, i16 %804, i32 14
  %830 = insertelement <16 x i16> %829, i16 %805, i32 15
  %831 = insertelement <16 x i16> %830, i16 %805, i32 16
  %832 = insertelement <16 x i16> %831, i16 %805, i32 17
  %833 = insertelement <16 x i16> %832, i16 %805, i32 18
  %834 = insertelement <16 x i16> %833, i16 %805, i32 19
  %835 = insertelement <16 x i16> %834, i16 %805, i32 20
  %836 = insertelement <16 x i16> %835, i16 %806, i32 21
  %837 = insertelement <16 x i16> %836, i16 %806, i32 22
  %838 = insertelement <16 x i16> %837, i16 %806, i32 23
  %839 = insertelement <16 x i16> %838, i16 %806, i32 24
  %840 = insertelement <16 x i16> %839, i16 %806, i32 25
  %841 = insertelement <16 x i16> %840, i16 %806, i32 26
  %842 = insertelement <16 x i16> %841, i16 %806, i32 27
  %843 = insertelement <16 x i16> %842, i16 %808, i32 28
  %844 = insertelement <16 x i16> %843, i16 %809, i32 29
  %845 = insertelement <16 x i16> %844, i16 %809, i32 30
  %846 = insertelement <16 x i16> %845, i16 %810, i32 31
  %847 = insertelement <16 x i16> %846, i16 %810, i32 32
  %848 = insertelement <16 x i16> %847, i16 %810, i32 33
  %849 = insertelement <16 x i16> %848, i16 %811, i32 34
  %850 = insertelement <16 x i16> %849, i16 %811, i32 35
  %851 = insertelement <16 x i16> %850, i16 %811, i32 36
  %852 = insertelement <16 x i16> %851, i16 %811, i32 37
  %853 = insertelement <16 x i16> %852, i16 %812, i32 38
  %854 = insertelement <16 x i16> %853, i16 %812, i32 39
  %855 = insertelement <16 x i16> %854, i16 %812, i32 40
  %856 = insertelement <16 x i16> %855, i16 %812, i32 41
  %857 = insertelement <16 x i16> %856, i16 %812, i32 42
  %858 = insertelement <16 x i16> %857, i16 %813, i32 43
  %859 = insertelement <16 x i16> %858, i16 %813, i32 44
  %860 = insertelement <16 x i16> %859, i16 %813, i32 45
  %861 = insertelement <16 x i16> %860, i16 %813, i32 46
  %862 = insertelement <16 x i16> %861, i16 %813, i32 47
  %863 = insertelement <16 x i16> %862, i16 %813, i32 48
  %864 = insertelement <16 x i16> %863, i16 %814, i32 49
  %865 = insertelement <16 x i16> %864, i16 %814, i32 50
  %866 = insertelement <16 x i16> %865, i16 %814, i32 51
  %867 = insertelement <16 x i16> %866, i16 %814, i32 52
  %868 = insertelement <16 x i16> %867, i16 %814, i32 53
  %869 = insertelement <16 x i16> %868, i16 %814, i32 54
  %870 = insertelement <16 x i16> %869, i16 %814, i32 55
  %871 = bitcast <16 x i16> %870 to <8 x i32>
  %872 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %871)
  %873 = fmul <8 x float> undef, %872
  %874 = bitcast float* %797 to <4 x float>*
  %875 = bitcast <4 x float>* %796 to <8 x float>*
  store <8 x float> %873, <8 x float>* %875, align 1, !tbaa !2
  %876 = shufflevector <16 x i8> %792, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %877 = getelementptr inbounds float, float* %789, i64 8
  %878 = bitcast <16 x i8> %876 to <8 x i16>
  %879 = shufflevector <8 x i16> %878, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %880 = bitcast float* %877 to <4 x float>*
  %881 = getelementptr inbounds float, float* %789, i64 12
  %882 = shufflevector <8 x i16> %878, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %883 = extractelement <8 x i16> %879, i32 0
  %884 = extractelement <8 x i16> %879, i32 1
  %885 = extractelement <8 x i16> %879, i32 2
  %886 = extractelement <8 x i16> %879, i32 3
  %887 = extractelement <8 x i16> %879, i32 4
  %888 = extractelement <8 x i16> %879, i32 5
  %889 = extractelement <8 x i16> %879, i32 6
  %890 = extractelement <8 x i16> %879, i32 7
  %891 = extractelement <8 x i16> %882, i32 0
  %892 = extractelement <8 x i16> %882, i32 1
  %893 = extractelement <8 x i16> %882, i32 2
  %894 = extractelement <8 x i16> %882, i32 3
  %895 = extractelement <8 x i16> %882, i32 4
  %896 = extractelement <8 x i16> %882, i32 5
  %897 = extractelement <8 x i16> %882, i32 6
  %898 = extractelement <8 x i16> %882, i32 7
  %899 = insertelement <16 x i16> undef, i16 %884, i32 0
  %900 = insertelement <16 x i16> %899, i16 %885, i32 1
  %901 = insertelement <16 x i16> %900, i16 %885, i32 2
  %902 = insertelement <16 x i16> %901, i16 %886, i32 3
  %903 = insertelement <16 x i16> %902, i16 %886, i32 4
  %904 = insertelement <16 x i16> %903, i16 %886, i32 5
  %905 = insertelement <16 x i16> %904, i16 %887, i32 6
  %906 = insertelement <16 x i16> %905, i16 %887, i32 7
  %907 = insertelement <16 x i16> %906, i16 %887, i32 8
  %908 = insertelement <16 x i16> %907, i16 %887, i32 9
  %909 = insertelement <16 x i16> %908, i16 %888, i32 10
  %910 = insertelement <16 x i16> %909, i16 %888, i32 11
  %911 = insertelement <16 x i16> %910, i16 %888, i32 12
  %912 = insertelement <16 x i16> %911, i16 %888, i32 13
  %913 = insertelement <16 x i16> %912, i16 %888, i32 14
  %914 = insertelement <16 x i16> %913, i16 %889, i32 15
  %915 = insertelement <16 x i16> %914, i16 %889, i32 16
  %916 = insertelement <16 x i16> %915, i16 %889, i32 17
  %917 = insertelement <16 x i16> %916, i16 %889, i32 18
  %918 = insertelement <16 x i16> %917, i16 %889, i32 19
  %919 = insertelement <16 x i16> %918, i16 %889, i32 20
  %920 = insertelement <16 x i16> %919, i16 %890, i32 21
  %921 = insertelement <16 x i16> %920, i16 %890, i32 22
  %922 = insertelement <16 x i16> %921, i16 %890, i32 23
  %923 = insertelement <16 x i16> %922, i16 %890, i32 24
  %924 = insertelement <16 x i16> %923, i16 %890, i32 25
  %925 = insertelement <16 x i16> %924, i16 %890, i32 26
  %926 = insertelement <16 x i16> %925, i16 %890, i32 27
  %927 = insertelement <16 x i16> %926, i16 %892, i32 28
  %928 = insertelement <16 x i16> %927, i16 %893, i32 29
  %929 = insertelement <16 x i16> %928, i16 %893, i32 30
  %930 = insertelement <16 x i16> %929, i16 %894, i32 31
  %931 = insertelement <16 x i16> %930, i16 %894, i32 32
  %932 = insertelement <16 x i16> %931, i16 %894, i32 33
  %933 = insertelement <16 x i16> %932, i16 %895, i32 34
  %934 = insertelement <16 x i16> %933, i16 %895, i32 35
  %935 = insertelement <16 x i16> %934, i16 %895, i32 36
  %936 = insertelement <16 x i16> %935, i16 %895, i32 37
  %937 = insertelement <16 x i16> %936, i16 %896, i32 38
  %938 = insertelement <16 x i16> %937, i16 %896, i32 39
  %939 = insertelement <16 x i16> %938, i16 %896, i32 40
  %940 = insertelement <16 x i16> %939, i16 %896, i32 41
  %941 = insertelement <16 x i16> %940, i16 %896, i32 42
  %942 = insertelement <16 x i16> %941, i16 %897, i32 43
  %943 = insertelement <16 x i16> %942, i16 %897, i32 44
  %944 = insertelement <16 x i16> %943, i16 %897, i32 45
  %945 = insertelement <16 x i16> %944, i16 %897, i32 46
  %946 = insertelement <16 x i16> %945, i16 %897, i32 47
  %947 = insertelement <16 x i16> %946, i16 %897, i32 48
  %948 = insertelement <16 x i16> %947, i16 %898, i32 49
  %949 = insertelement <16 x i16> %948, i16 %898, i32 50
  %950 = insertelement <16 x i16> %949, i16 %898, i32 51
  %951 = insertelement <16 x i16> %950, i16 %898, i32 52
  %952 = insertelement <16 x i16> %951, i16 %898, i32 53
  %953 = insertelement <16 x i16> %952, i16 %898, i32 54
  %954 = insertelement <16 x i16> %953, i16 %898, i32 55
  %955 = bitcast <16 x i16> %954 to <8 x i32>
  %956 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %955)
  %957 = fmul <8 x float> undef, %956
  %958 = bitcast float* %881 to <4 x float>*
  %959 = bitcast <4 x float>* %880 to <8 x float>*
  store <8 x float> %957, <8 x float>* %959, align 1, !tbaa !2
  %960 = getelementptr inbounds i8, i8* %607, i64 %1
  %961 = add nuw i64 %606, 1
  %962 = icmp eq i64 %961, %3
  br i1 %962, label %1146, label %605

; <label>:963:                                    ; preds = %414
  br i1 %416, label %1146, label %964

; <label>:964:                                    ; preds = %963
  br label %965

; <label>:965:                                    ; preds = %965, %964
  %966 = phi i64 [ %1144, %965 ], [ 0, %964 ]
  %967 = phi i8* [ %1143, %965 ], [ %0, %964 ]
  %968 = phi float* [ %971, %965 ], [ %4, %964 ]
  %969 = getelementptr inbounds i8, i8* %967, i64 %2
  %970 = getelementptr inbounds i8, i8* %969, i64 -16
  %971 = getelementptr inbounds float, float* %968, i64 %2
  %972 = getelementptr inbounds float, float* %971, i64 -16
  %973 = bitcast i8* %970 to <16 x i8>*
  %974 = load <16 x i8>, <16 x i8>* %973, align 1, !tbaa !2
  %975 = xor <16 x i8> %974, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %976 = shufflevector <16 x i8> %975, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %977 = bitcast <16 x i8> %976 to <8 x i16>
  %978 = shufflevector <8 x i16> %977, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %979 = bitcast float* %972 to <4 x float>*
  %980 = getelementptr inbounds float, float* %972, i64 4
  %981 = shufflevector <8 x i16> %977, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %982 = extractelement <8 x i16> %978, i32 0
  %983 = extractelement <8 x i16> %978, i32 1
  %984 = extractelement <8 x i16> %978, i32 2
  %985 = extractelement <8 x i16> %978, i32 3
  %986 = extractelement <8 x i16> %978, i32 4
  %987 = extractelement <8 x i16> %978, i32 5
  %988 = extractelement <8 x i16> %978, i32 6
  %989 = extractelement <8 x i16> %978, i32 7
  %990 = extractelement <8 x i16> %981, i32 0
  %991 = extractelement <8 x i16> %981, i32 1
  %992 = extractelement <8 x i16> %981, i32 2
  %993 = extractelement <8 x i16> %981, i32 3
  %994 = extractelement <8 x i16> %981, i32 4
  %995 = extractelement <8 x i16> %981, i32 5
  %996 = extractelement <8 x i16> %981, i32 6
  %997 = extractelement <8 x i16> %981, i32 7
  %998 = insertelement <16 x i16> undef, i16 %983, i32 0
  %999 = insertelement <16 x i16> %998, i16 %984, i32 1
  %1000 = insertelement <16 x i16> %999, i16 %984, i32 2
  %1001 = insertelement <16 x i16> %1000, i16 %985, i32 3
  %1002 = insertelement <16 x i16> %1001, i16 %985, i32 4
  %1003 = insertelement <16 x i16> %1002, i16 %985, i32 5
  %1004 = insertelement <16 x i16> %1003, i16 %986, i32 6
  %1005 = insertelement <16 x i16> %1004, i16 %986, i32 7
  %1006 = insertelement <16 x i16> %1005, i16 %986, i32 8
  %1007 = insertelement <16 x i16> %1006, i16 %986, i32 9
  %1008 = insertelement <16 x i16> %1007, i16 %987, i32 10
  %1009 = insertelement <16 x i16> %1008, i16 %987, i32 11
  %1010 = insertelement <16 x i16> %1009, i16 %987, i32 12
  %1011 = insertelement <16 x i16> %1010, i16 %987, i32 13
  %1012 = insertelement <16 x i16> %1011, i16 %987, i32 14
  %1013 = insertelement <16 x i16> %1012, i16 %988, i32 15
  %1014 = insertelement <16 x i16> %1013, i16 %988, i32 16
  %1015 = insertelement <16 x i16> %1014, i16 %988, i32 17
  %1016 = insertelement <16 x i16> %1015, i16 %988, i32 18
  %1017 = insertelement <16 x i16> %1016, i16 %988, i32 19
  %1018 = insertelement <16 x i16> %1017, i16 %988, i32 20
  %1019 = insertelement <16 x i16> %1018, i16 %989, i32 21
  %1020 = insertelement <16 x i16> %1019, i16 %989, i32 22
  %1021 = insertelement <16 x i16> %1020, i16 %989, i32 23
  %1022 = insertelement <16 x i16> %1021, i16 %989, i32 24
  %1023 = insertelement <16 x i16> %1022, i16 %989, i32 25
  %1024 = insertelement <16 x i16> %1023, i16 %989, i32 26
  %1025 = insertelement <16 x i16> %1024, i16 %989, i32 27
  %1026 = insertelement <16 x i16> %1025, i16 %991, i32 28
  %1027 = insertelement <16 x i16> %1026, i16 %992, i32 29
  %1028 = insertelement <16 x i16> %1027, i16 %992, i32 30
  %1029 = insertelement <16 x i16> %1028, i16 %993, i32 31
  %1030 = insertelement <16 x i16> %1029, i16 %993, i32 32
  %1031 = insertelement <16 x i16> %1030, i16 %993, i32 33
  %1032 = insertelement <16 x i16> %1031, i16 %994, i32 34
  %1033 = insertelement <16 x i16> %1032, i16 %994, i32 35
  %1034 = insertelement <16 x i16> %1033, i16 %994, i32 36
  %1035 = insertelement <16 x i16> %1034, i16 %994, i32 37
  %1036 = insertelement <16 x i16> %1035, i16 %995, i32 38
  %1037 = insertelement <16 x i16> %1036, i16 %995, i32 39
  %1038 = insertelement <16 x i16> %1037, i16 %995, i32 40
  %1039 = insertelement <16 x i16> %1038, i16 %995, i32 41
  %1040 = insertelement <16 x i16> %1039, i16 %995, i32 42
  %1041 = insertelement <16 x i16> %1040, i16 %996, i32 43
  %1042 = insertelement <16 x i16> %1041, i16 %996, i32 44
  %1043 = insertelement <16 x i16> %1042, i16 %996, i32 45
  %1044 = insertelement <16 x i16> %1043, i16 %996, i32 46
  %1045 = insertelement <16 x i16> %1044, i16 %996, i32 47
  %1046 = insertelement <16 x i16> %1045, i16 %996, i32 48
  %1047 = insertelement <16 x i16> %1046, i16 %997, i32 49
  %1048 = insertelement <16 x i16> %1047, i16 %997, i32 50
  %1049 = insertelement <16 x i16> %1048, i16 %997, i32 51
  %1050 = insertelement <16 x i16> %1049, i16 %997, i32 52
  %1051 = insertelement <16 x i16> %1050, i16 %997, i32 53
  %1052 = insertelement <16 x i16> %1051, i16 %997, i32 54
  %1053 = insertelement <16 x i16> %1052, i16 %997, i32 55
  %1054 = bitcast <16 x i16> %1053 to <8 x i32>
  %1055 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %1054)
  %1056 = fmul <8 x float> undef, %1055
  %1057 = bitcast float* %980 to <4 x float>*
  %1058 = bitcast <4 x float>* %979 to <8 x float>*
  store <8 x float> %1056, <8 x float>* %1058, align 1, !tbaa !2
  %1059 = shufflevector <16 x i8> %975, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1060 = getelementptr inbounds float, float* %972, i64 8
  %1061 = bitcast <16 x i8> %1059 to <8 x i16>
  %1062 = shufflevector <8 x i16> %1061, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1063 = bitcast float* %1060 to <4 x float>*
  %1064 = getelementptr inbounds float, float* %972, i64 12
  %1065 = shufflevector <8 x i16> %1061, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1066 = extractelement <8 x i16> %1062, i32 0
  %1067 = extractelement <8 x i16> %1062, i32 1
  %1068 = extractelement <8 x i16> %1062, i32 2
  %1069 = extractelement <8 x i16> %1062, i32 3
  %1070 = extractelement <8 x i16> %1062, i32 4
  %1071 = extractelement <8 x i16> %1062, i32 5
  %1072 = extractelement <8 x i16> %1062, i32 6
  %1073 = extractelement <8 x i16> %1062, i32 7
  %1074 = extractelement <8 x i16> %1065, i32 0
  %1075 = extractelement <8 x i16> %1065, i32 1
  %1076 = extractelement <8 x i16> %1065, i32 2
  %1077 = extractelement <8 x i16> %1065, i32 3
  %1078 = extractelement <8 x i16> %1065, i32 4
  %1079 = extractelement <8 x i16> %1065, i32 5
  %1080 = extractelement <8 x i16> %1065, i32 6
  %1081 = extractelement <8 x i16> %1065, i32 7
  %1082 = insertelement <16 x i16> undef, i16 %1067, i32 0
  %1083 = insertelement <16 x i16> %1082, i16 %1068, i32 1
  %1084 = insertelement <16 x i16> %1083, i16 %1068, i32 2
  %1085 = insertelement <16 x i16> %1084, i16 %1069, i32 3
  %1086 = insertelement <16 x i16> %1085, i16 %1069, i32 4
  %1087 = insertelement <16 x i16> %1086, i16 %1069, i32 5
  %1088 = insertelement <16 x i16> %1087, i16 %1070, i32 6
  %1089 = insertelement <16 x i16> %1088, i16 %1070, i32 7
  %1090 = insertelement <16 x i16> %1089, i16 %1070, i32 8
  %1091 = insertelement <16 x i16> %1090, i16 %1070, i32 9
  %1092 = insertelement <16 x i16> %1091, i16 %1071, i32 10
  %1093 = insertelement <16 x i16> %1092, i16 %1071, i32 11
  %1094 = insertelement <16 x i16> %1093, i16 %1071, i32 12
  %1095 = insertelement <16 x i16> %1094, i16 %1071, i32 13
  %1096 = insertelement <16 x i16> %1095, i16 %1071, i32 14
  %1097 = insertelement <16 x i16> %1096, i16 %1072, i32 15
  %1098 = insertelement <16 x i16> %1097, i16 %1072, i32 16
  %1099 = insertelement <16 x i16> %1098, i16 %1072, i32 17
  %1100 = insertelement <16 x i16> %1099, i16 %1072, i32 18
  %1101 = insertelement <16 x i16> %1100, i16 %1072, i32 19
  %1102 = insertelement <16 x i16> %1101, i16 %1072, i32 20
  %1103 = insertelement <16 x i16> %1102, i16 %1073, i32 21
  %1104 = insertelement <16 x i16> %1103, i16 %1073, i32 22
  %1105 = insertelement <16 x i16> %1104, i16 %1073, i32 23
  %1106 = insertelement <16 x i16> %1105, i16 %1073, i32 24
  %1107 = insertelement <16 x i16> %1106, i16 %1073, i32 25
  %1108 = insertelement <16 x i16> %1107, i16 %1073, i32 26
  %1109 = insertelement <16 x i16> %1108, i16 %1073, i32 27
  %1110 = insertelement <16 x i16> %1109, i16 %1075, i32 28
  %1111 = insertelement <16 x i16> %1110, i16 %1076, i32 29
  %1112 = insertelement <16 x i16> %1111, i16 %1076, i32 30
  %1113 = insertelement <16 x i16> %1112, i16 %1077, i32 31
  %1114 = insertelement <16 x i16> %1113, i16 %1077, i32 32
  %1115 = insertelement <16 x i16> %1114, i16 %1077, i32 33
  %1116 = insertelement <16 x i16> %1115, i16 %1078, i32 34
  %1117 = insertelement <16 x i16> %1116, i16 %1078, i32 35
  %1118 = insertelement <16 x i16> %1117, i16 %1078, i32 36
  %1119 = insertelement <16 x i16> %1118, i16 %1078, i32 37
  %1120 = insertelement <16 x i16> %1119, i16 %1079, i32 38
  %1121 = insertelement <16 x i16> %1120, i16 %1079, i32 39
  %1122 = insertelement <16 x i16> %1121, i16 %1079, i32 40
  %1123 = insertelement <16 x i16> %1122, i16 %1079, i32 41
  %1124 = insertelement <16 x i16> %1123, i16 %1079, i32 42
  %1125 = insertelement <16 x i16> %1124, i16 %1080, i32 43
  %1126 = insertelement <16 x i16> %1125, i16 %1080, i32 44
  %1127 = insertelement <16 x i16> %1126, i16 %1080, i32 45
  %1128 = insertelement <16 x i16> %1127, i16 %1080, i32 46
  %1129 = insertelement <16 x i16> %1128, i16 %1080, i32 47
  %1130 = insertelement <16 x i16> %1129, i16 %1080, i32 48
  %1131 = insertelement <16 x i16> %1130, i16 %1081, i32 49
  %1132 = insertelement <16 x i16> %1131, i16 %1081, i32 50
  %1133 = insertelement <16 x i16> %1132, i16 %1081, i32 51
  %1134 = insertelement <16 x i16> %1133, i16 %1081, i32 52
  %1135 = insertelement <16 x i16> %1134, i16 %1081, i32 53
  %1136 = insertelement <16 x i16> %1135, i16 %1081, i32 54
  %1137 = insertelement <16 x i16> %1136, i16 %1081, i32 55
  %1138 = bitcast <16 x i16> %1137 to <8 x i32>
  %1139 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %1138)
  %1140 = fmul <8 x float> undef, %1139
  %1141 = bitcast float* %1064 to <4 x float>*
  %1142 = bitcast <4 x float>* %1063 to <8 x float>*
  store <8 x float> %1140, <8 x float>* %1142, align 1, !tbaa !2
  %1143 = getelementptr inbounds i8, i8* %967, i64 %1
  %1144 = add nuw i64 %966, 1
  %1145 = icmp eq i64 %1144, %3
  br i1 %1145, label %1146, label %965

; <label>:1146:                                   ; preds = %965, %963, %785, %600, %411, %403, %220, %217
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN4Simd4Sse213NeuralConvertILb0EEEvPKhmmmPf(i8*, i64, i64, i64, float*) local_unnamed_addr #1 comdat {
  %6 = ptrtoint i8* %0 to i64
  %7 = and i64 %6, -16
  %8 = inttoptr i64 %7 to i8*
  %9 = icmp eq i8* %8, %0
  %10 = and i64 %1, -16
  %11 = icmp eq i64 %10, %1
  %12 = and i1 %11, %9
  br i1 %12, label %13, label %406

; <label>:13:                                     ; preds = %5
  %14 = bitcast float* %4 to i8*
  %15 = ptrtoint float* %4 to i64
  %16 = and i64 %15, -16
  %17 = inttoptr i64 %16 to i8*
  %18 = icmp eq i8* %17, %14
  %19 = and i64 %2, -16
  %20 = icmp eq i64 %19, %2
  %21 = and i1 %20, %18
  br i1 %21, label %22, label %406

; <label>:22:                                     ; preds = %13
  %23 = shl i64 %2, 2
  %24 = mul i64 %23, %3
  %25 = icmp ugt i64 %24, 1048575
  %26 = icmp ugt i64 %2, 15
  br i1 %25, label %27, label %217

; <label>:27:                                     ; preds = %22
  br i1 %26, label %29, label %28

; <label>:28:                                     ; preds = %27
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb1ELb1EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:29:                                     ; preds = %27
  %30 = icmp eq i64 %3, 0
  br i1 %30, label %216, label %31

; <label>:31:                                     ; preds = %29
  br label %32

; <label>:32:                                     ; preds = %211, %31
  %33 = phi i64 [ %214, %211 ], [ 0, %31 ]
  %34 = phi i8* [ %212, %211 ], [ %0, %31 ]
  %35 = phi float* [ %213, %211 ], [ %4, %31 ]
  br label %36

; <label>:36:                                     ; preds = %36, %32
  %37 = phi i64 [ 0, %32 ], [ %209, %36 ]
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = getelementptr inbounds float, float* %35, i64 %37
  %40 = bitcast i8* %38 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 16, !tbaa !2
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = bitcast <16 x i8> %42 to <8 x i16>
  %44 = shufflevector <8 x i16> %43, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %45 = bitcast float* %39 to <4 x float>*
  %46 = getelementptr inbounds float, float* %39, i64 4
  %47 = shufflevector <8 x i16> %43, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %48 = extractelement <8 x i16> %44, i32 0
  %49 = extractelement <8 x i16> %44, i32 1
  %50 = extractelement <8 x i16> %44, i32 2
  %51 = extractelement <8 x i16> %44, i32 3
  %52 = extractelement <8 x i16> %44, i32 4
  %53 = extractelement <8 x i16> %44, i32 5
  %54 = extractelement <8 x i16> %44, i32 6
  %55 = extractelement <8 x i16> %44, i32 7
  %56 = extractelement <8 x i16> %47, i32 0
  %57 = extractelement <8 x i16> %47, i32 1
  %58 = extractelement <8 x i16> %47, i32 2
  %59 = extractelement <8 x i16> %47, i32 3
  %60 = extractelement <8 x i16> %47, i32 4
  %61 = extractelement <8 x i16> %47, i32 5
  %62 = extractelement <8 x i16> %47, i32 6
  %63 = extractelement <8 x i16> %47, i32 7
  %64 = insertelement <16 x i16> undef, i16 %49, i32 0
  %65 = insertelement <16 x i16> %64, i16 %50, i32 1
  %66 = insertelement <16 x i16> %65, i16 %50, i32 2
  %67 = insertelement <16 x i16> %66, i16 %51, i32 3
  %68 = insertelement <16 x i16> %67, i16 %51, i32 4
  %69 = insertelement <16 x i16> %68, i16 %51, i32 5
  %70 = insertelement <16 x i16> %69, i16 %52, i32 6
  %71 = insertelement <16 x i16> %70, i16 %52, i32 7
  %72 = insertelement <16 x i16> %71, i16 %52, i32 8
  %73 = insertelement <16 x i16> %72, i16 %52, i32 9
  %74 = insertelement <16 x i16> %73, i16 %53, i32 10
  %75 = insertelement <16 x i16> %74, i16 %53, i32 11
  %76 = insertelement <16 x i16> %75, i16 %53, i32 12
  %77 = insertelement <16 x i16> %76, i16 %53, i32 13
  %78 = insertelement <16 x i16> %77, i16 %53, i32 14
  %79 = insertelement <16 x i16> %78, i16 %54, i32 15
  %80 = insertelement <16 x i16> %79, i16 %54, i32 16
  %81 = insertelement <16 x i16> %80, i16 %54, i32 17
  %82 = insertelement <16 x i16> %81, i16 %54, i32 18
  %83 = insertelement <16 x i16> %82, i16 %54, i32 19
  %84 = insertelement <16 x i16> %83, i16 %54, i32 20
  %85 = insertelement <16 x i16> %84, i16 %55, i32 21
  %86 = insertelement <16 x i16> %85, i16 %55, i32 22
  %87 = insertelement <16 x i16> %86, i16 %55, i32 23
  %88 = insertelement <16 x i16> %87, i16 %55, i32 24
  %89 = insertelement <16 x i16> %88, i16 %55, i32 25
  %90 = insertelement <16 x i16> %89, i16 %55, i32 26
  %91 = insertelement <16 x i16> %90, i16 %55, i32 27
  %92 = insertelement <16 x i16> %91, i16 %57, i32 28
  %93 = insertelement <16 x i16> %92, i16 %58, i32 29
  %94 = insertelement <16 x i16> %93, i16 %58, i32 30
  %95 = insertelement <16 x i16> %94, i16 %59, i32 31
  %96 = insertelement <16 x i16> %95, i16 %59, i32 32
  %97 = insertelement <16 x i16> %96, i16 %59, i32 33
  %98 = insertelement <16 x i16> %97, i16 %60, i32 34
  %99 = insertelement <16 x i16> %98, i16 %60, i32 35
  %100 = insertelement <16 x i16> %99, i16 %60, i32 36
  %101 = insertelement <16 x i16> %100, i16 %60, i32 37
  %102 = insertelement <16 x i16> %101, i16 %61, i32 38
  %103 = insertelement <16 x i16> %102, i16 %61, i32 39
  %104 = insertelement <16 x i16> %103, i16 %61, i32 40
  %105 = insertelement <16 x i16> %104, i16 %61, i32 41
  %106 = insertelement <16 x i16> %105, i16 %61, i32 42
  %107 = insertelement <16 x i16> %106, i16 %62, i32 43
  %108 = insertelement <16 x i16> %107, i16 %62, i32 44
  %109 = insertelement <16 x i16> %108, i16 %62, i32 45
  %110 = insertelement <16 x i16> %109, i16 %62, i32 46
  %111 = insertelement <16 x i16> %110, i16 %62, i32 47
  %112 = insertelement <16 x i16> %111, i16 %62, i32 48
  %113 = insertelement <16 x i16> %112, i16 %63, i32 49
  %114 = insertelement <16 x i16> %113, i16 %63, i32 50
  %115 = insertelement <16 x i16> %114, i16 %63, i32 51
  %116 = insertelement <16 x i16> %115, i16 %63, i32 52
  %117 = insertelement <16 x i16> %116, i16 %63, i32 53
  %118 = insertelement <16 x i16> %117, i16 %63, i32 54
  %119 = insertelement <16 x i16> %118, i16 %63, i32 55
  %120 = bitcast <16 x i16> %119 to <8 x i32>
  %121 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %120)
  %122 = fmul <8 x float> undef, %121
  %123 = bitcast float* %46 to <4 x float>*
  %124 = bitcast <4 x float>* %45 to <8 x float>*
  store <8 x float> %122, <8 x float>* %124, align 16, !tbaa !2, !nontemporal !5
  %125 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = getelementptr inbounds float, float* %39, i64 8
  %127 = bitcast <16 x i8> %125 to <8 x i16>
  %128 = shufflevector <8 x i16> %127, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = bitcast float* %126 to <4 x float>*
  %130 = getelementptr inbounds float, float* %39, i64 12
  %131 = shufflevector <8 x i16> %127, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %132 = extractelement <8 x i16> %128, i32 0
  %133 = extractelement <8 x i16> %128, i32 1
  %134 = extractelement <8 x i16> %128, i32 2
  %135 = extractelement <8 x i16> %128, i32 3
  %136 = extractelement <8 x i16> %128, i32 4
  %137 = extractelement <8 x i16> %128, i32 5
  %138 = extractelement <8 x i16> %128, i32 6
  %139 = extractelement <8 x i16> %128, i32 7
  %140 = extractelement <8 x i16> %131, i32 0
  %141 = extractelement <8 x i16> %131, i32 1
  %142 = extractelement <8 x i16> %131, i32 2
  %143 = extractelement <8 x i16> %131, i32 3
  %144 = extractelement <8 x i16> %131, i32 4
  %145 = extractelement <8 x i16> %131, i32 5
  %146 = extractelement <8 x i16> %131, i32 6
  %147 = extractelement <8 x i16> %131, i32 7
  %148 = insertelement <16 x i16> undef, i16 %133, i32 0
  %149 = insertelement <16 x i16> %148, i16 %134, i32 1
  %150 = insertelement <16 x i16> %149, i16 %134, i32 2
  %151 = insertelement <16 x i16> %150, i16 %135, i32 3
  %152 = insertelement <16 x i16> %151, i16 %135, i32 4
  %153 = insertelement <16 x i16> %152, i16 %135, i32 5
  %154 = insertelement <16 x i16> %153, i16 %136, i32 6
  %155 = insertelement <16 x i16> %154, i16 %136, i32 7
  %156 = insertelement <16 x i16> %155, i16 %136, i32 8
  %157 = insertelement <16 x i16> %156, i16 %136, i32 9
  %158 = insertelement <16 x i16> %157, i16 %137, i32 10
  %159 = insertelement <16 x i16> %158, i16 %137, i32 11
  %160 = insertelement <16 x i16> %159, i16 %137, i32 12
  %161 = insertelement <16 x i16> %160, i16 %137, i32 13
  %162 = insertelement <16 x i16> %161, i16 %137, i32 14
  %163 = insertelement <16 x i16> %162, i16 %138, i32 15
  %164 = insertelement <16 x i16> %163, i16 %138, i32 16
  %165 = insertelement <16 x i16> %164, i16 %138, i32 17
  %166 = insertelement <16 x i16> %165, i16 %138, i32 18
  %167 = insertelement <16 x i16> %166, i16 %138, i32 19
  %168 = insertelement <16 x i16> %167, i16 %138, i32 20
  %169 = insertelement <16 x i16> %168, i16 %139, i32 21
  %170 = insertelement <16 x i16> %169, i16 %139, i32 22
  %171 = insertelement <16 x i16> %170, i16 %139, i32 23
  %172 = insertelement <16 x i16> %171, i16 %139, i32 24
  %173 = insertelement <16 x i16> %172, i16 %139, i32 25
  %174 = insertelement <16 x i16> %173, i16 %139, i32 26
  %175 = insertelement <16 x i16> %174, i16 %139, i32 27
  %176 = insertelement <16 x i16> %175, i16 %141, i32 28
  %177 = insertelement <16 x i16> %176, i16 %142, i32 29
  %178 = insertelement <16 x i16> %177, i16 %142, i32 30
  %179 = insertelement <16 x i16> %178, i16 %143, i32 31
  %180 = insertelement <16 x i16> %179, i16 %143, i32 32
  %181 = insertelement <16 x i16> %180, i16 %143, i32 33
  %182 = insertelement <16 x i16> %181, i16 %144, i32 34
  %183 = insertelement <16 x i16> %182, i16 %144, i32 35
  %184 = insertelement <16 x i16> %183, i16 %144, i32 36
  %185 = insertelement <16 x i16> %184, i16 %144, i32 37
  %186 = insertelement <16 x i16> %185, i16 %145, i32 38
  %187 = insertelement <16 x i16> %186, i16 %145, i32 39
  %188 = insertelement <16 x i16> %187, i16 %145, i32 40
  %189 = insertelement <16 x i16> %188, i16 %145, i32 41
  %190 = insertelement <16 x i16> %189, i16 %145, i32 42
  %191 = insertelement <16 x i16> %190, i16 %146, i32 43
  %192 = insertelement <16 x i16> %191, i16 %146, i32 44
  %193 = insertelement <16 x i16> %192, i16 %146, i32 45
  %194 = insertelement <16 x i16> %193, i16 %146, i32 46
  %195 = insertelement <16 x i16> %194, i16 %146, i32 47
  %196 = insertelement <16 x i16> %195, i16 %146, i32 48
  %197 = insertelement <16 x i16> %196, i16 %147, i32 49
  %198 = insertelement <16 x i16> %197, i16 %147, i32 50
  %199 = insertelement <16 x i16> %198, i16 %147, i32 51
  %200 = insertelement <16 x i16> %199, i16 %147, i32 52
  %201 = insertelement <16 x i16> %200, i16 %147, i32 53
  %202 = insertelement <16 x i16> %201, i16 %147, i32 54
  %203 = insertelement <16 x i16> %202, i16 %147, i32 55
  %204 = bitcast <16 x i16> %203 to <8 x i32>
  %205 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %204)
  %206 = fmul <8 x float> undef, %205
  %207 = bitcast float* %130 to <4 x float>*
  %208 = bitcast <4 x float>* %129 to <8 x float>*
  store <8 x float> %206, <8 x float>* %208, align 16, !tbaa !2, !nontemporal !5
  %209 = add nuw i64 %37, 16
  %210 = icmp ult i64 %209, %2
  br i1 %210, label %36, label %211

; <label>:211:                                    ; preds = %36
  %212 = getelementptr inbounds i8, i8* %34, i64 %1
  %213 = getelementptr inbounds float, float* %35, i64 %2
  %214 = add nuw i64 %33, 1
  %215 = icmp eq i64 %214, %3
  br i1 %215, label %216, label %32

; <label>:216:                                    ; preds = %211, %29
  tail call void @llvm.x86.sse2.mfence()
  br label %1140

; <label>:217:                                    ; preds = %22
  br i1 %26, label %219, label %218

; <label>:218:                                    ; preds = %217
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb1ELb0EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:219:                                    ; preds = %217
  %220 = icmp eq i64 %3, 0
  br i1 %220, label %1140, label %221

; <label>:221:                                    ; preds = %219
  br label %222

; <label>:222:                                    ; preds = %401, %221
  %223 = phi i64 [ %404, %401 ], [ 0, %221 ]
  %224 = phi i8* [ %402, %401 ], [ %0, %221 ]
  %225 = phi float* [ %403, %401 ], [ %4, %221 ]
  br label %226

; <label>:226:                                    ; preds = %226, %222
  %227 = phi i64 [ 0, %222 ], [ %399, %226 ]
  %228 = getelementptr inbounds i8, i8* %224, i64 %227
  %229 = getelementptr inbounds float, float* %225, i64 %227
  %230 = bitcast i8* %228 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 16, !tbaa !2
  %232 = shufflevector <16 x i8> %231, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %233 = bitcast <16 x i8> %232 to <8 x i16>
  %234 = shufflevector <8 x i16> %233, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %235 = bitcast float* %229 to <4 x float>*
  %236 = getelementptr inbounds float, float* %229, i64 4
  %237 = shufflevector <8 x i16> %233, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %238 = extractelement <8 x i16> %234, i32 0
  %239 = extractelement <8 x i16> %234, i32 1
  %240 = extractelement <8 x i16> %234, i32 2
  %241 = extractelement <8 x i16> %234, i32 3
  %242 = extractelement <8 x i16> %234, i32 4
  %243 = extractelement <8 x i16> %234, i32 5
  %244 = extractelement <8 x i16> %234, i32 6
  %245 = extractelement <8 x i16> %234, i32 7
  %246 = extractelement <8 x i16> %237, i32 0
  %247 = extractelement <8 x i16> %237, i32 1
  %248 = extractelement <8 x i16> %237, i32 2
  %249 = extractelement <8 x i16> %237, i32 3
  %250 = extractelement <8 x i16> %237, i32 4
  %251 = extractelement <8 x i16> %237, i32 5
  %252 = extractelement <8 x i16> %237, i32 6
  %253 = extractelement <8 x i16> %237, i32 7
  %254 = insertelement <16 x i16> undef, i16 %239, i32 0
  %255 = insertelement <16 x i16> %254, i16 %240, i32 1
  %256 = insertelement <16 x i16> %255, i16 %240, i32 2
  %257 = insertelement <16 x i16> %256, i16 %241, i32 3
  %258 = insertelement <16 x i16> %257, i16 %241, i32 4
  %259 = insertelement <16 x i16> %258, i16 %241, i32 5
  %260 = insertelement <16 x i16> %259, i16 %242, i32 6
  %261 = insertelement <16 x i16> %260, i16 %242, i32 7
  %262 = insertelement <16 x i16> %261, i16 %242, i32 8
  %263 = insertelement <16 x i16> %262, i16 %242, i32 9
  %264 = insertelement <16 x i16> %263, i16 %243, i32 10
  %265 = insertelement <16 x i16> %264, i16 %243, i32 11
  %266 = insertelement <16 x i16> %265, i16 %243, i32 12
  %267 = insertelement <16 x i16> %266, i16 %243, i32 13
  %268 = insertelement <16 x i16> %267, i16 %243, i32 14
  %269 = insertelement <16 x i16> %268, i16 %244, i32 15
  %270 = insertelement <16 x i16> %269, i16 %244, i32 16
  %271 = insertelement <16 x i16> %270, i16 %244, i32 17
  %272 = insertelement <16 x i16> %271, i16 %244, i32 18
  %273 = insertelement <16 x i16> %272, i16 %244, i32 19
  %274 = insertelement <16 x i16> %273, i16 %244, i32 20
  %275 = insertelement <16 x i16> %274, i16 %245, i32 21
  %276 = insertelement <16 x i16> %275, i16 %245, i32 22
  %277 = insertelement <16 x i16> %276, i16 %245, i32 23
  %278 = insertelement <16 x i16> %277, i16 %245, i32 24
  %279 = insertelement <16 x i16> %278, i16 %245, i32 25
  %280 = insertelement <16 x i16> %279, i16 %245, i32 26
  %281 = insertelement <16 x i16> %280, i16 %245, i32 27
  %282 = insertelement <16 x i16> %281, i16 %247, i32 28
  %283 = insertelement <16 x i16> %282, i16 %248, i32 29
  %284 = insertelement <16 x i16> %283, i16 %248, i32 30
  %285 = insertelement <16 x i16> %284, i16 %249, i32 31
  %286 = insertelement <16 x i16> %285, i16 %249, i32 32
  %287 = insertelement <16 x i16> %286, i16 %249, i32 33
  %288 = insertelement <16 x i16> %287, i16 %250, i32 34
  %289 = insertelement <16 x i16> %288, i16 %250, i32 35
  %290 = insertelement <16 x i16> %289, i16 %250, i32 36
  %291 = insertelement <16 x i16> %290, i16 %250, i32 37
  %292 = insertelement <16 x i16> %291, i16 %251, i32 38
  %293 = insertelement <16 x i16> %292, i16 %251, i32 39
  %294 = insertelement <16 x i16> %293, i16 %251, i32 40
  %295 = insertelement <16 x i16> %294, i16 %251, i32 41
  %296 = insertelement <16 x i16> %295, i16 %251, i32 42
  %297 = insertelement <16 x i16> %296, i16 %252, i32 43
  %298 = insertelement <16 x i16> %297, i16 %252, i32 44
  %299 = insertelement <16 x i16> %298, i16 %252, i32 45
  %300 = insertelement <16 x i16> %299, i16 %252, i32 46
  %301 = insertelement <16 x i16> %300, i16 %252, i32 47
  %302 = insertelement <16 x i16> %301, i16 %252, i32 48
  %303 = insertelement <16 x i16> %302, i16 %253, i32 49
  %304 = insertelement <16 x i16> %303, i16 %253, i32 50
  %305 = insertelement <16 x i16> %304, i16 %253, i32 51
  %306 = insertelement <16 x i16> %305, i16 %253, i32 52
  %307 = insertelement <16 x i16> %306, i16 %253, i32 53
  %308 = insertelement <16 x i16> %307, i16 %253, i32 54
  %309 = insertelement <16 x i16> %308, i16 %253, i32 55
  %310 = bitcast <16 x i16> %309 to <8 x i32>
  %311 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %310)
  %312 = fmul <8 x float> undef, %311
  %313 = bitcast float* %236 to <4 x float>*
  %314 = bitcast <4 x float>* %235 to <8 x float>*
  store <8 x float> %312, <8 x float>* %314, align 16, !tbaa !2
  %315 = shufflevector <16 x i8> %231, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %316 = getelementptr inbounds float, float* %229, i64 8
  %317 = bitcast <16 x i8> %315 to <8 x i16>
  %318 = shufflevector <8 x i16> %317, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %319 = bitcast float* %316 to <4 x float>*
  %320 = getelementptr inbounds float, float* %229, i64 12
  %321 = shufflevector <8 x i16> %317, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %322 = extractelement <8 x i16> %318, i32 0
  %323 = extractelement <8 x i16> %318, i32 1
  %324 = extractelement <8 x i16> %318, i32 2
  %325 = extractelement <8 x i16> %318, i32 3
  %326 = extractelement <8 x i16> %318, i32 4
  %327 = extractelement <8 x i16> %318, i32 5
  %328 = extractelement <8 x i16> %318, i32 6
  %329 = extractelement <8 x i16> %318, i32 7
  %330 = extractelement <8 x i16> %321, i32 0
  %331 = extractelement <8 x i16> %321, i32 1
  %332 = extractelement <8 x i16> %321, i32 2
  %333 = extractelement <8 x i16> %321, i32 3
  %334 = extractelement <8 x i16> %321, i32 4
  %335 = extractelement <8 x i16> %321, i32 5
  %336 = extractelement <8 x i16> %321, i32 6
  %337 = extractelement <8 x i16> %321, i32 7
  %338 = insertelement <16 x i16> undef, i16 %323, i32 0
  %339 = insertelement <16 x i16> %338, i16 %324, i32 1
  %340 = insertelement <16 x i16> %339, i16 %324, i32 2
  %341 = insertelement <16 x i16> %340, i16 %325, i32 3
  %342 = insertelement <16 x i16> %341, i16 %325, i32 4
  %343 = insertelement <16 x i16> %342, i16 %325, i32 5
  %344 = insertelement <16 x i16> %343, i16 %326, i32 6
  %345 = insertelement <16 x i16> %344, i16 %326, i32 7
  %346 = insertelement <16 x i16> %345, i16 %326, i32 8
  %347 = insertelement <16 x i16> %346, i16 %326, i32 9
  %348 = insertelement <16 x i16> %347, i16 %327, i32 10
  %349 = insertelement <16 x i16> %348, i16 %327, i32 11
  %350 = insertelement <16 x i16> %349, i16 %327, i32 12
  %351 = insertelement <16 x i16> %350, i16 %327, i32 13
  %352 = insertelement <16 x i16> %351, i16 %327, i32 14
  %353 = insertelement <16 x i16> %352, i16 %328, i32 15
  %354 = insertelement <16 x i16> %353, i16 %328, i32 16
  %355 = insertelement <16 x i16> %354, i16 %328, i32 17
  %356 = insertelement <16 x i16> %355, i16 %328, i32 18
  %357 = insertelement <16 x i16> %356, i16 %328, i32 19
  %358 = insertelement <16 x i16> %357, i16 %328, i32 20
  %359 = insertelement <16 x i16> %358, i16 %329, i32 21
  %360 = insertelement <16 x i16> %359, i16 %329, i32 22
  %361 = insertelement <16 x i16> %360, i16 %329, i32 23
  %362 = insertelement <16 x i16> %361, i16 %329, i32 24
  %363 = insertelement <16 x i16> %362, i16 %329, i32 25
  %364 = insertelement <16 x i16> %363, i16 %329, i32 26
  %365 = insertelement <16 x i16> %364, i16 %329, i32 27
  %366 = insertelement <16 x i16> %365, i16 %331, i32 28
  %367 = insertelement <16 x i16> %366, i16 %332, i32 29
  %368 = insertelement <16 x i16> %367, i16 %332, i32 30
  %369 = insertelement <16 x i16> %368, i16 %333, i32 31
  %370 = insertelement <16 x i16> %369, i16 %333, i32 32
  %371 = insertelement <16 x i16> %370, i16 %333, i32 33
  %372 = insertelement <16 x i16> %371, i16 %334, i32 34
  %373 = insertelement <16 x i16> %372, i16 %334, i32 35
  %374 = insertelement <16 x i16> %373, i16 %334, i32 36
  %375 = insertelement <16 x i16> %374, i16 %334, i32 37
  %376 = insertelement <16 x i16> %375, i16 %335, i32 38
  %377 = insertelement <16 x i16> %376, i16 %335, i32 39
  %378 = insertelement <16 x i16> %377, i16 %335, i32 40
  %379 = insertelement <16 x i16> %378, i16 %335, i32 41
  %380 = insertelement <16 x i16> %379, i16 %335, i32 42
  %381 = insertelement <16 x i16> %380, i16 %336, i32 43
  %382 = insertelement <16 x i16> %381, i16 %336, i32 44
  %383 = insertelement <16 x i16> %382, i16 %336, i32 45
  %384 = insertelement <16 x i16> %383, i16 %336, i32 46
  %385 = insertelement <16 x i16> %384, i16 %336, i32 47
  %386 = insertelement <16 x i16> %385, i16 %336, i32 48
  %387 = insertelement <16 x i16> %386, i16 %337, i32 49
  %388 = insertelement <16 x i16> %387, i16 %337, i32 50
  %389 = insertelement <16 x i16> %388, i16 %337, i32 51
  %390 = insertelement <16 x i16> %389, i16 %337, i32 52
  %391 = insertelement <16 x i16> %390, i16 %337, i32 53
  %392 = insertelement <16 x i16> %391, i16 %337, i32 54
  %393 = insertelement <16 x i16> %392, i16 %337, i32 55
  %394 = bitcast <16 x i16> %393 to <8 x i32>
  %395 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %394)
  %396 = fmul <8 x float> undef, %395
  %397 = bitcast float* %320 to <4 x float>*
  %398 = bitcast <4 x float>* %319 to <8 x float>*
  store <8 x float> %396, <8 x float>* %398, align 16, !tbaa !2
  %399 = add nuw i64 %227, 16
  %400 = icmp ult i64 %399, %2
  br i1 %400, label %226, label %401

; <label>:401:                                    ; preds = %226
  %402 = getelementptr inbounds i8, i8* %224, i64 %1
  %403 = getelementptr inbounds float, float* %225, i64 %2
  %404 = add nuw i64 %223, 1
  %405 = icmp eq i64 %404, %3
  br i1 %405, label %1140, label %222

; <label>:406:                                    ; preds = %13, %5
  %407 = icmp ugt i64 %2, 15
  br i1 %407, label %409, label %408

; <label>:408:                                    ; preds = %406
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([132 x i8], [132 x i8]* @__PRETTY_FUNCTION__._ZN4Simd4Sse213NeuralConvertILb0ELb0ELb0EEEvPKhmmmPf, i64 0, i64 0)) #6
  unreachable

; <label>:409:                                    ; preds = %406
  %410 = and i64 %2, -16
  %411 = icmp eq i64 %3, 0
  br i1 %411, label %1140, label %412

; <label>:412:                                    ; preds = %409
  %413 = icmp eq i64 %410, 0
  %414 = icmp eq i64 %410, %2
  br i1 %413, label %958, label %415

; <label>:415:                                    ; preds = %412
  br i1 %414, label %417, label %416

; <label>:416:                                    ; preds = %415
  br label %602

; <label>:417:                                    ; preds = %415
  br label %418

; <label>:418:                                    ; preds = %597, %417
  %419 = phi i64 [ %600, %597 ], [ 0, %417 ]
  %420 = phi i8* [ %599, %597 ], [ %0, %417 ]
  %421 = phi float* [ %598, %597 ], [ %4, %417 ]
  br label %422

; <label>:422:                                    ; preds = %422, %418
  %423 = phi i64 [ 0, %418 ], [ %595, %422 ]
  %424 = getelementptr inbounds i8, i8* %420, i64 %423
  %425 = getelementptr inbounds float, float* %421, i64 %423
  %426 = bitcast i8* %424 to <16 x i8>*
  %427 = load <16 x i8>, <16 x i8>* %426, align 1, !tbaa !2
  %428 = shufflevector <16 x i8> %427, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %429 = bitcast <16 x i8> %428 to <8 x i16>
  %430 = shufflevector <8 x i16> %429, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %431 = bitcast float* %425 to <4 x float>*
  %432 = getelementptr inbounds float, float* %425, i64 4
  %433 = shufflevector <8 x i16> %429, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %434 = extractelement <8 x i16> %430, i32 0
  %435 = extractelement <8 x i16> %430, i32 1
  %436 = extractelement <8 x i16> %430, i32 2
  %437 = extractelement <8 x i16> %430, i32 3
  %438 = extractelement <8 x i16> %430, i32 4
  %439 = extractelement <8 x i16> %430, i32 5
  %440 = extractelement <8 x i16> %430, i32 6
  %441 = extractelement <8 x i16> %430, i32 7
  %442 = extractelement <8 x i16> %433, i32 0
  %443 = extractelement <8 x i16> %433, i32 1
  %444 = extractelement <8 x i16> %433, i32 2
  %445 = extractelement <8 x i16> %433, i32 3
  %446 = extractelement <8 x i16> %433, i32 4
  %447 = extractelement <8 x i16> %433, i32 5
  %448 = extractelement <8 x i16> %433, i32 6
  %449 = extractelement <8 x i16> %433, i32 7
  %450 = insertelement <16 x i16> undef, i16 %435, i32 0
  %451 = insertelement <16 x i16> %450, i16 %436, i32 1
  %452 = insertelement <16 x i16> %451, i16 %436, i32 2
  %453 = insertelement <16 x i16> %452, i16 %437, i32 3
  %454 = insertelement <16 x i16> %453, i16 %437, i32 4
  %455 = insertelement <16 x i16> %454, i16 %437, i32 5
  %456 = insertelement <16 x i16> %455, i16 %438, i32 6
  %457 = insertelement <16 x i16> %456, i16 %438, i32 7
  %458 = insertelement <16 x i16> %457, i16 %438, i32 8
  %459 = insertelement <16 x i16> %458, i16 %438, i32 9
  %460 = insertelement <16 x i16> %459, i16 %439, i32 10
  %461 = insertelement <16 x i16> %460, i16 %439, i32 11
  %462 = insertelement <16 x i16> %461, i16 %439, i32 12
  %463 = insertelement <16 x i16> %462, i16 %439, i32 13
  %464 = insertelement <16 x i16> %463, i16 %439, i32 14
  %465 = insertelement <16 x i16> %464, i16 %440, i32 15
  %466 = insertelement <16 x i16> %465, i16 %440, i32 16
  %467 = insertelement <16 x i16> %466, i16 %440, i32 17
  %468 = insertelement <16 x i16> %467, i16 %440, i32 18
  %469 = insertelement <16 x i16> %468, i16 %440, i32 19
  %470 = insertelement <16 x i16> %469, i16 %440, i32 20
  %471 = insertelement <16 x i16> %470, i16 %441, i32 21
  %472 = insertelement <16 x i16> %471, i16 %441, i32 22
  %473 = insertelement <16 x i16> %472, i16 %441, i32 23
  %474 = insertelement <16 x i16> %473, i16 %441, i32 24
  %475 = insertelement <16 x i16> %474, i16 %441, i32 25
  %476 = insertelement <16 x i16> %475, i16 %441, i32 26
  %477 = insertelement <16 x i16> %476, i16 %441, i32 27
  %478 = insertelement <16 x i16> %477, i16 %443, i32 28
  %479 = insertelement <16 x i16> %478, i16 %444, i32 29
  %480 = insertelement <16 x i16> %479, i16 %444, i32 30
  %481 = insertelement <16 x i16> %480, i16 %445, i32 31
  %482 = insertelement <16 x i16> %481, i16 %445, i32 32
  %483 = insertelement <16 x i16> %482, i16 %445, i32 33
  %484 = insertelement <16 x i16> %483, i16 %446, i32 34
  %485 = insertelement <16 x i16> %484, i16 %446, i32 35
  %486 = insertelement <16 x i16> %485, i16 %446, i32 36
  %487 = insertelement <16 x i16> %486, i16 %446, i32 37
  %488 = insertelement <16 x i16> %487, i16 %447, i32 38
  %489 = insertelement <16 x i16> %488, i16 %447, i32 39
  %490 = insertelement <16 x i16> %489, i16 %447, i32 40
  %491 = insertelement <16 x i16> %490, i16 %447, i32 41
  %492 = insertelement <16 x i16> %491, i16 %447, i32 42
  %493 = insertelement <16 x i16> %492, i16 %448, i32 43
  %494 = insertelement <16 x i16> %493, i16 %448, i32 44
  %495 = insertelement <16 x i16> %494, i16 %448, i32 45
  %496 = insertelement <16 x i16> %495, i16 %448, i32 46
  %497 = insertelement <16 x i16> %496, i16 %448, i32 47
  %498 = insertelement <16 x i16> %497, i16 %448, i32 48
  %499 = insertelement <16 x i16> %498, i16 %449, i32 49
  %500 = insertelement <16 x i16> %499, i16 %449, i32 50
  %501 = insertelement <16 x i16> %500, i16 %449, i32 51
  %502 = insertelement <16 x i16> %501, i16 %449, i32 52
  %503 = insertelement <16 x i16> %502, i16 %449, i32 53
  %504 = insertelement <16 x i16> %503, i16 %449, i32 54
  %505 = insertelement <16 x i16> %504, i16 %449, i32 55
  %506 = bitcast <16 x i16> %505 to <8 x i32>
  %507 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %506)
  %508 = fmul <8 x float> undef, %507
  %509 = bitcast float* %432 to <4 x float>*
  %510 = bitcast <4 x float>* %431 to <8 x float>*
  store <8 x float> %508, <8 x float>* %510, align 1, !tbaa !2
  %511 = shufflevector <16 x i8> %427, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %512 = getelementptr inbounds float, float* %425, i64 8
  %513 = bitcast <16 x i8> %511 to <8 x i16>
  %514 = shufflevector <8 x i16> %513, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %515 = bitcast float* %512 to <4 x float>*
  %516 = getelementptr inbounds float, float* %425, i64 12
  %517 = shufflevector <8 x i16> %513, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %518 = extractelement <8 x i16> %514, i32 0
  %519 = extractelement <8 x i16> %514, i32 1
  %520 = extractelement <8 x i16> %514, i32 2
  %521 = extractelement <8 x i16> %514, i32 3
  %522 = extractelement <8 x i16> %514, i32 4
  %523 = extractelement <8 x i16> %514, i32 5
  %524 = extractelement <8 x i16> %514, i32 6
  %525 = extractelement <8 x i16> %514, i32 7
  %526 = extractelement <8 x i16> %517, i32 0
  %527 = extractelement <8 x i16> %517, i32 1
  %528 = extractelement <8 x i16> %517, i32 2
  %529 = extractelement <8 x i16> %517, i32 3
  %530 = extractelement <8 x i16> %517, i32 4
  %531 = extractelement <8 x i16> %517, i32 5
  %532 = extractelement <8 x i16> %517, i32 6
  %533 = extractelement <8 x i16> %517, i32 7
  %534 = insertelement <16 x i16> undef, i16 %519, i32 0
  %535 = insertelement <16 x i16> %534, i16 %520, i32 1
  %536 = insertelement <16 x i16> %535, i16 %520, i32 2
  %537 = insertelement <16 x i16> %536, i16 %521, i32 3
  %538 = insertelement <16 x i16> %537, i16 %521, i32 4
  %539 = insertelement <16 x i16> %538, i16 %521, i32 5
  %540 = insertelement <16 x i16> %539, i16 %522, i32 6
  %541 = insertelement <16 x i16> %540, i16 %522, i32 7
  %542 = insertelement <16 x i16> %541, i16 %522, i32 8
  %543 = insertelement <16 x i16> %542, i16 %522, i32 9
  %544 = insertelement <16 x i16> %543, i16 %523, i32 10
  %545 = insertelement <16 x i16> %544, i16 %523, i32 11
  %546 = insertelement <16 x i16> %545, i16 %523, i32 12
  %547 = insertelement <16 x i16> %546, i16 %523, i32 13
  %548 = insertelement <16 x i16> %547, i16 %523, i32 14
  %549 = insertelement <16 x i16> %548, i16 %524, i32 15
  %550 = insertelement <16 x i16> %549, i16 %524, i32 16
  %551 = insertelement <16 x i16> %550, i16 %524, i32 17
  %552 = insertelement <16 x i16> %551, i16 %524, i32 18
  %553 = insertelement <16 x i16> %552, i16 %524, i32 19
  %554 = insertelement <16 x i16> %553, i16 %524, i32 20
  %555 = insertelement <16 x i16> %554, i16 %525, i32 21
  %556 = insertelement <16 x i16> %555, i16 %525, i32 22
  %557 = insertelement <16 x i16> %556, i16 %525, i32 23
  %558 = insertelement <16 x i16> %557, i16 %525, i32 24
  %559 = insertelement <16 x i16> %558, i16 %525, i32 25
  %560 = insertelement <16 x i16> %559, i16 %525, i32 26
  %561 = insertelement <16 x i16> %560, i16 %525, i32 27
  %562 = insertelement <16 x i16> %561, i16 %527, i32 28
  %563 = insertelement <16 x i16> %562, i16 %528, i32 29
  %564 = insertelement <16 x i16> %563, i16 %528, i32 30
  %565 = insertelement <16 x i16> %564, i16 %529, i32 31
  %566 = insertelement <16 x i16> %565, i16 %529, i32 32
  %567 = insertelement <16 x i16> %566, i16 %529, i32 33
  %568 = insertelement <16 x i16> %567, i16 %530, i32 34
  %569 = insertelement <16 x i16> %568, i16 %530, i32 35
  %570 = insertelement <16 x i16> %569, i16 %530, i32 36
  %571 = insertelement <16 x i16> %570, i16 %530, i32 37
  %572 = insertelement <16 x i16> %571, i16 %531, i32 38
  %573 = insertelement <16 x i16> %572, i16 %531, i32 39
  %574 = insertelement <16 x i16> %573, i16 %531, i32 40
  %575 = insertelement <16 x i16> %574, i16 %531, i32 41
  %576 = insertelement <16 x i16> %575, i16 %531, i32 42
  %577 = insertelement <16 x i16> %576, i16 %532, i32 43
  %578 = insertelement <16 x i16> %577, i16 %532, i32 44
  %579 = insertelement <16 x i16> %578, i16 %532, i32 45
  %580 = insertelement <16 x i16> %579, i16 %532, i32 46
  %581 = insertelement <16 x i16> %580, i16 %532, i32 47
  %582 = insertelement <16 x i16> %581, i16 %532, i32 48
  %583 = insertelement <16 x i16> %582, i16 %533, i32 49
  %584 = insertelement <16 x i16> %583, i16 %533, i32 50
  %585 = insertelement <16 x i16> %584, i16 %533, i32 51
  %586 = insertelement <16 x i16> %585, i16 %533, i32 52
  %587 = insertelement <16 x i16> %586, i16 %533, i32 53
  %588 = insertelement <16 x i16> %587, i16 %533, i32 54
  %589 = insertelement <16 x i16> %588, i16 %533, i32 55
  %590 = bitcast <16 x i16> %589 to <8 x i32>
  %591 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %590)
  %592 = fmul <8 x float> undef, %591
  %593 = bitcast float* %516 to <4 x float>*
  %594 = bitcast <4 x float>* %515 to <8 x float>*
  store <8 x float> %592, <8 x float>* %594, align 1, !tbaa !2
  %595 = add nuw i64 %423, 16
  %596 = icmp ult i64 %595, %2
  br i1 %596, label %422, label %597

; <label>:597:                                    ; preds = %422
  %598 = getelementptr inbounds float, float* %421, i64 %2
  %599 = getelementptr inbounds i8, i8* %420, i64 %1
  %600 = add nuw i64 %419, 1
  %601 = icmp eq i64 %600, %3
  br i1 %601, label %1140, label %418

; <label>:602:                                    ; preds = %781, %416
  %603 = phi i64 [ %956, %781 ], [ 0, %416 ]
  %604 = phi i8* [ %955, %781 ], [ %0, %416 ]
  %605 = phi float* [ %784, %781 ], [ %4, %416 ]
  br label %606

; <label>:606:                                    ; preds = %606, %602
  %607 = phi i64 [ 0, %602 ], [ %779, %606 ]
  %608 = getelementptr inbounds i8, i8* %604, i64 %607
  %609 = getelementptr inbounds float, float* %605, i64 %607
  %610 = bitcast i8* %608 to <16 x i8>*
  %611 = load <16 x i8>, <16 x i8>* %610, align 1, !tbaa !2
  %612 = shufflevector <16 x i8> %611, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %613 = bitcast <16 x i8> %612 to <8 x i16>
  %614 = shufflevector <8 x i16> %613, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %615 = bitcast float* %609 to <4 x float>*
  %616 = getelementptr inbounds float, float* %609, i64 4
  %617 = shufflevector <8 x i16> %613, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %618 = extractelement <8 x i16> %614, i32 0
  %619 = extractelement <8 x i16> %614, i32 1
  %620 = extractelement <8 x i16> %614, i32 2
  %621 = extractelement <8 x i16> %614, i32 3
  %622 = extractelement <8 x i16> %614, i32 4
  %623 = extractelement <8 x i16> %614, i32 5
  %624 = extractelement <8 x i16> %614, i32 6
  %625 = extractelement <8 x i16> %614, i32 7
  %626 = extractelement <8 x i16> %617, i32 0
  %627 = extractelement <8 x i16> %617, i32 1
  %628 = extractelement <8 x i16> %617, i32 2
  %629 = extractelement <8 x i16> %617, i32 3
  %630 = extractelement <8 x i16> %617, i32 4
  %631 = extractelement <8 x i16> %617, i32 5
  %632 = extractelement <8 x i16> %617, i32 6
  %633 = extractelement <8 x i16> %617, i32 7
  %634 = insertelement <16 x i16> undef, i16 %619, i32 0
  %635 = insertelement <16 x i16> %634, i16 %620, i32 1
  %636 = insertelement <16 x i16> %635, i16 %620, i32 2
  %637 = insertelement <16 x i16> %636, i16 %621, i32 3
  %638 = insertelement <16 x i16> %637, i16 %621, i32 4
  %639 = insertelement <16 x i16> %638, i16 %621, i32 5
  %640 = insertelement <16 x i16> %639, i16 %622, i32 6
  %641 = insertelement <16 x i16> %640, i16 %622, i32 7
  %642 = insertelement <16 x i16> %641, i16 %622, i32 8
  %643 = insertelement <16 x i16> %642, i16 %622, i32 9
  %644 = insertelement <16 x i16> %643, i16 %623, i32 10
  %645 = insertelement <16 x i16> %644, i16 %623, i32 11
  %646 = insertelement <16 x i16> %645, i16 %623, i32 12
  %647 = insertelement <16 x i16> %646, i16 %623, i32 13
  %648 = insertelement <16 x i16> %647, i16 %623, i32 14
  %649 = insertelement <16 x i16> %648, i16 %624, i32 15
  %650 = insertelement <16 x i16> %649, i16 %624, i32 16
  %651 = insertelement <16 x i16> %650, i16 %624, i32 17
  %652 = insertelement <16 x i16> %651, i16 %624, i32 18
  %653 = insertelement <16 x i16> %652, i16 %624, i32 19
  %654 = insertelement <16 x i16> %653, i16 %624, i32 20
  %655 = insertelement <16 x i16> %654, i16 %625, i32 21
  %656 = insertelement <16 x i16> %655, i16 %625, i32 22
  %657 = insertelement <16 x i16> %656, i16 %625, i32 23
  %658 = insertelement <16 x i16> %657, i16 %625, i32 24
  %659 = insertelement <16 x i16> %658, i16 %625, i32 25
  %660 = insertelement <16 x i16> %659, i16 %625, i32 26
  %661 = insertelement <16 x i16> %660, i16 %625, i32 27
  %662 = insertelement <16 x i16> %661, i16 %627, i32 28
  %663 = insertelement <16 x i16> %662, i16 %628, i32 29
  %664 = insertelement <16 x i16> %663, i16 %628, i32 30
  %665 = insertelement <16 x i16> %664, i16 %629, i32 31
  %666 = insertelement <16 x i16> %665, i16 %629, i32 32
  %667 = insertelement <16 x i16> %666, i16 %629, i32 33
  %668 = insertelement <16 x i16> %667, i16 %630, i32 34
  %669 = insertelement <16 x i16> %668, i16 %630, i32 35
  %670 = insertelement <16 x i16> %669, i16 %630, i32 36
  %671 = insertelement <16 x i16> %670, i16 %630, i32 37
  %672 = insertelement <16 x i16> %671, i16 %631, i32 38
  %673 = insertelement <16 x i16> %672, i16 %631, i32 39
  %674 = insertelement <16 x i16> %673, i16 %631, i32 40
  %675 = insertelement <16 x i16> %674, i16 %631, i32 41
  %676 = insertelement <16 x i16> %675, i16 %631, i32 42
  %677 = insertelement <16 x i16> %676, i16 %632, i32 43
  %678 = insertelement <16 x i16> %677, i16 %632, i32 44
  %679 = insertelement <16 x i16> %678, i16 %632, i32 45
  %680 = insertelement <16 x i16> %679, i16 %632, i32 46
  %681 = insertelement <16 x i16> %680, i16 %632, i32 47
  %682 = insertelement <16 x i16> %681, i16 %632, i32 48
  %683 = insertelement <16 x i16> %682, i16 %633, i32 49
  %684 = insertelement <16 x i16> %683, i16 %633, i32 50
  %685 = insertelement <16 x i16> %684, i16 %633, i32 51
  %686 = insertelement <16 x i16> %685, i16 %633, i32 52
  %687 = insertelement <16 x i16> %686, i16 %633, i32 53
  %688 = insertelement <16 x i16> %687, i16 %633, i32 54
  %689 = insertelement <16 x i16> %688, i16 %633, i32 55
  %690 = bitcast <16 x i16> %689 to <8 x i32>
  %691 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %690)
  %692 = fmul <8 x float> undef, %691
  %693 = bitcast float* %616 to <4 x float>*
  %694 = bitcast <4 x float>* %615 to <8 x float>*
  store <8 x float> %692, <8 x float>* %694, align 1, !tbaa !2
  %695 = shufflevector <16 x i8> %611, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %696 = getelementptr inbounds float, float* %609, i64 8
  %697 = bitcast <16 x i8> %695 to <8 x i16>
  %698 = shufflevector <8 x i16> %697, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %699 = bitcast float* %696 to <4 x float>*
  %700 = getelementptr inbounds float, float* %609, i64 12
  %701 = shufflevector <8 x i16> %697, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %702 = extractelement <8 x i16> %698, i32 0
  %703 = extractelement <8 x i16> %698, i32 1
  %704 = extractelement <8 x i16> %698, i32 2
  %705 = extractelement <8 x i16> %698, i32 3
  %706 = extractelement <8 x i16> %698, i32 4
  %707 = extractelement <8 x i16> %698, i32 5
  %708 = extractelement <8 x i16> %698, i32 6
  %709 = extractelement <8 x i16> %698, i32 7
  %710 = extractelement <8 x i16> %701, i32 0
  %711 = extractelement <8 x i16> %701, i32 1
  %712 = extractelement <8 x i16> %701, i32 2
  %713 = extractelement <8 x i16> %701, i32 3
  %714 = extractelement <8 x i16> %701, i32 4
  %715 = extractelement <8 x i16> %701, i32 5
  %716 = extractelement <8 x i16> %701, i32 6
  %717 = extractelement <8 x i16> %701, i32 7
  %718 = insertelement <16 x i16> undef, i16 %703, i32 0
  %719 = insertelement <16 x i16> %718, i16 %704, i32 1
  %720 = insertelement <16 x i16> %719, i16 %704, i32 2
  %721 = insertelement <16 x i16> %720, i16 %705, i32 3
  %722 = insertelement <16 x i16> %721, i16 %705, i32 4
  %723 = insertelement <16 x i16> %722, i16 %705, i32 5
  %724 = insertelement <16 x i16> %723, i16 %706, i32 6
  %725 = insertelement <16 x i16> %724, i16 %706, i32 7
  %726 = insertelement <16 x i16> %725, i16 %706, i32 8
  %727 = insertelement <16 x i16> %726, i16 %706, i32 9
  %728 = insertelement <16 x i16> %727, i16 %707, i32 10
  %729 = insertelement <16 x i16> %728, i16 %707, i32 11
  %730 = insertelement <16 x i16> %729, i16 %707, i32 12
  %731 = insertelement <16 x i16> %730, i16 %707, i32 13
  %732 = insertelement <16 x i16> %731, i16 %707, i32 14
  %733 = insertelement <16 x i16> %732, i16 %708, i32 15
  %734 = insertelement <16 x i16> %733, i16 %708, i32 16
  %735 = insertelement <16 x i16> %734, i16 %708, i32 17
  %736 = insertelement <16 x i16> %735, i16 %708, i32 18
  %737 = insertelement <16 x i16> %736, i16 %708, i32 19
  %738 = insertelement <16 x i16> %737, i16 %708, i32 20
  %739 = insertelement <16 x i16> %738, i16 %709, i32 21
  %740 = insertelement <16 x i16> %739, i16 %709, i32 22
  %741 = insertelement <16 x i16> %740, i16 %709, i32 23
  %742 = insertelement <16 x i16> %741, i16 %709, i32 24
  %743 = insertelement <16 x i16> %742, i16 %709, i32 25
  %744 = insertelement <16 x i16> %743, i16 %709, i32 26
  %745 = insertelement <16 x i16> %744, i16 %709, i32 27
  %746 = insertelement <16 x i16> %745, i16 %711, i32 28
  %747 = insertelement <16 x i16> %746, i16 %712, i32 29
  %748 = insertelement <16 x i16> %747, i16 %712, i32 30
  %749 = insertelement <16 x i16> %748, i16 %713, i32 31
  %750 = insertelement <16 x i16> %749, i16 %713, i32 32
  %751 = insertelement <16 x i16> %750, i16 %713, i32 33
  %752 = insertelement <16 x i16> %751, i16 %714, i32 34
  %753 = insertelement <16 x i16> %752, i16 %714, i32 35
  %754 = insertelement <16 x i16> %753, i16 %714, i32 36
  %755 = insertelement <16 x i16> %754, i16 %714, i32 37
  %756 = insertelement <16 x i16> %755, i16 %715, i32 38
  %757 = insertelement <16 x i16> %756, i16 %715, i32 39
  %758 = insertelement <16 x i16> %757, i16 %715, i32 40
  %759 = insertelement <16 x i16> %758, i16 %715, i32 41
  %760 = insertelement <16 x i16> %759, i16 %715, i32 42
  %761 = insertelement <16 x i16> %760, i16 %716, i32 43
  %762 = insertelement <16 x i16> %761, i16 %716, i32 44
  %763 = insertelement <16 x i16> %762, i16 %716, i32 45
  %764 = insertelement <16 x i16> %763, i16 %716, i32 46
  %765 = insertelement <16 x i16> %764, i16 %716, i32 47
  %766 = insertelement <16 x i16> %765, i16 %716, i32 48
  %767 = insertelement <16 x i16> %766, i16 %717, i32 49
  %768 = insertelement <16 x i16> %767, i16 %717, i32 50
  %769 = insertelement <16 x i16> %768, i16 %717, i32 51
  %770 = insertelement <16 x i16> %769, i16 %717, i32 52
  %771 = insertelement <16 x i16> %770, i16 %717, i32 53
  %772 = insertelement <16 x i16> %771, i16 %717, i32 54
  %773 = insertelement <16 x i16> %772, i16 %717, i32 55
  %774 = bitcast <16 x i16> %773 to <8 x i32>
  %775 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %774)
  %776 = fmul <8 x float> undef, %775
  %777 = bitcast float* %700 to <4 x float>*
  %778 = bitcast <4 x float>* %699 to <8 x float>*
  store <8 x float> %776, <8 x float>* %778, align 1, !tbaa !2
  %779 = add nuw i64 %607, 16
  %780 = icmp ult i64 %779, %410
  br i1 %780, label %606, label %781

; <label>:781:                                    ; preds = %606
  %782 = getelementptr inbounds i8, i8* %604, i64 %2
  %783 = getelementptr inbounds i8, i8* %782, i64 -16
  %784 = getelementptr inbounds float, float* %605, i64 %2
  %785 = getelementptr inbounds float, float* %784, i64 -16
  %786 = bitcast i8* %783 to <16 x i8>*
  %787 = load <16 x i8>, <16 x i8>* %786, align 1, !tbaa !2
  %788 = shufflevector <16 x i8> %787, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %789 = bitcast <16 x i8> %788 to <8 x i16>
  %790 = shufflevector <8 x i16> %789, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %791 = bitcast float* %785 to <4 x float>*
  %792 = getelementptr inbounds float, float* %785, i64 4
  %793 = shufflevector <8 x i16> %789, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %794 = extractelement <8 x i16> %790, i32 0
  %795 = extractelement <8 x i16> %790, i32 1
  %796 = extractelement <8 x i16> %790, i32 2
  %797 = extractelement <8 x i16> %790, i32 3
  %798 = extractelement <8 x i16> %790, i32 4
  %799 = extractelement <8 x i16> %790, i32 5
  %800 = extractelement <8 x i16> %790, i32 6
  %801 = extractelement <8 x i16> %790, i32 7
  %802 = extractelement <8 x i16> %793, i32 0
  %803 = extractelement <8 x i16> %793, i32 1
  %804 = extractelement <8 x i16> %793, i32 2
  %805 = extractelement <8 x i16> %793, i32 3
  %806 = extractelement <8 x i16> %793, i32 4
  %807 = extractelement <8 x i16> %793, i32 5
  %808 = extractelement <8 x i16> %793, i32 6
  %809 = extractelement <8 x i16> %793, i32 7
  %810 = insertelement <16 x i16> undef, i16 %795, i32 0
  %811 = insertelement <16 x i16> %810, i16 %796, i32 1
  %812 = insertelement <16 x i16> %811, i16 %796, i32 2
  %813 = insertelement <16 x i16> %812, i16 %797, i32 3
  %814 = insertelement <16 x i16> %813, i16 %797, i32 4
  %815 = insertelement <16 x i16> %814, i16 %797, i32 5
  %816 = insertelement <16 x i16> %815, i16 %798, i32 6
  %817 = insertelement <16 x i16> %816, i16 %798, i32 7
  %818 = insertelement <16 x i16> %817, i16 %798, i32 8
  %819 = insertelement <16 x i16> %818, i16 %798, i32 9
  %820 = insertelement <16 x i16> %819, i16 %799, i32 10
  %821 = insertelement <16 x i16> %820, i16 %799, i32 11
  %822 = insertelement <16 x i16> %821, i16 %799, i32 12
  %823 = insertelement <16 x i16> %822, i16 %799, i32 13
  %824 = insertelement <16 x i16> %823, i16 %799, i32 14
  %825 = insertelement <16 x i16> %824, i16 %800, i32 15
  %826 = insertelement <16 x i16> %825, i16 %800, i32 16
  %827 = insertelement <16 x i16> %826, i16 %800, i32 17
  %828 = insertelement <16 x i16> %827, i16 %800, i32 18
  %829 = insertelement <16 x i16> %828, i16 %800, i32 19
  %830 = insertelement <16 x i16> %829, i16 %800, i32 20
  %831 = insertelement <16 x i16> %830, i16 %801, i32 21
  %832 = insertelement <16 x i16> %831, i16 %801, i32 22
  %833 = insertelement <16 x i16> %832, i16 %801, i32 23
  %834 = insertelement <16 x i16> %833, i16 %801, i32 24
  %835 = insertelement <16 x i16> %834, i16 %801, i32 25
  %836 = insertelement <16 x i16> %835, i16 %801, i32 26
  %837 = insertelement <16 x i16> %836, i16 %801, i32 27
  %838 = insertelement <16 x i16> %837, i16 %803, i32 28
  %839 = insertelement <16 x i16> %838, i16 %804, i32 29
  %840 = insertelement <16 x i16> %839, i16 %804, i32 30
  %841 = insertelement <16 x i16> %840, i16 %805, i32 31
  %842 = insertelement <16 x i16> %841, i16 %805, i32 32
  %843 = insertelement <16 x i16> %842, i16 %805, i32 33
  %844 = insertelement <16 x i16> %843, i16 %806, i32 34
  %845 = insertelement <16 x i16> %844, i16 %806, i32 35
  %846 = insertelement <16 x i16> %845, i16 %806, i32 36
  %847 = insertelement <16 x i16> %846, i16 %806, i32 37
  %848 = insertelement <16 x i16> %847, i16 %807, i32 38
  %849 = insertelement <16 x i16> %848, i16 %807, i32 39
  %850 = insertelement <16 x i16> %849, i16 %807, i32 40
  %851 = insertelement <16 x i16> %850, i16 %807, i32 41
  %852 = insertelement <16 x i16> %851, i16 %807, i32 42
  %853 = insertelement <16 x i16> %852, i16 %808, i32 43
  %854 = insertelement <16 x i16> %853, i16 %808, i32 44
  %855 = insertelement <16 x i16> %854, i16 %808, i32 45
  %856 = insertelement <16 x i16> %855, i16 %808, i32 46
  %857 = insertelement <16 x i16> %856, i16 %808, i32 47
  %858 = insertelement <16 x i16> %857, i16 %808, i32 48
  %859 = insertelement <16 x i16> %858, i16 %809, i32 49
  %860 = insertelement <16 x i16> %859, i16 %809, i32 50
  %861 = insertelement <16 x i16> %860, i16 %809, i32 51
  %862 = insertelement <16 x i16> %861, i16 %809, i32 52
  %863 = insertelement <16 x i16> %862, i16 %809, i32 53
  %864 = insertelement <16 x i16> %863, i16 %809, i32 54
  %865 = insertelement <16 x i16> %864, i16 %809, i32 55
  %866 = bitcast <16 x i16> %865 to <8 x i32>
  %867 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %866)
  %868 = fmul <8 x float> undef, %867
  %869 = bitcast float* %792 to <4 x float>*
  %870 = bitcast <4 x float>* %791 to <8 x float>*
  store <8 x float> %868, <8 x float>* %870, align 1, !tbaa !2
  %871 = shufflevector <16 x i8> %787, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %872 = getelementptr inbounds float, float* %785, i64 8
  %873 = bitcast <16 x i8> %871 to <8 x i16>
  %874 = shufflevector <8 x i16> %873, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %875 = bitcast float* %872 to <4 x float>*
  %876 = getelementptr inbounds float, float* %785, i64 12
  %877 = shufflevector <8 x i16> %873, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %878 = extractelement <8 x i16> %874, i32 0
  %879 = extractelement <8 x i16> %874, i32 1
  %880 = extractelement <8 x i16> %874, i32 2
  %881 = extractelement <8 x i16> %874, i32 3
  %882 = extractelement <8 x i16> %874, i32 4
  %883 = extractelement <8 x i16> %874, i32 5
  %884 = extractelement <8 x i16> %874, i32 6
  %885 = extractelement <8 x i16> %874, i32 7
  %886 = extractelement <8 x i16> %877, i32 0
  %887 = extractelement <8 x i16> %877, i32 1
  %888 = extractelement <8 x i16> %877, i32 2
  %889 = extractelement <8 x i16> %877, i32 3
  %890 = extractelement <8 x i16> %877, i32 4
  %891 = extractelement <8 x i16> %877, i32 5
  %892 = extractelement <8 x i16> %877, i32 6
  %893 = extractelement <8 x i16> %877, i32 7
  %894 = insertelement <16 x i16> undef, i16 %879, i32 0
  %895 = insertelement <16 x i16> %894, i16 %880, i32 1
  %896 = insertelement <16 x i16> %895, i16 %880, i32 2
  %897 = insertelement <16 x i16> %896, i16 %881, i32 3
  %898 = insertelement <16 x i16> %897, i16 %881, i32 4
  %899 = insertelement <16 x i16> %898, i16 %881, i32 5
  %900 = insertelement <16 x i16> %899, i16 %882, i32 6
  %901 = insertelement <16 x i16> %900, i16 %882, i32 7
  %902 = insertelement <16 x i16> %901, i16 %882, i32 8
  %903 = insertelement <16 x i16> %902, i16 %882, i32 9
  %904 = insertelement <16 x i16> %903, i16 %883, i32 10
  %905 = insertelement <16 x i16> %904, i16 %883, i32 11
  %906 = insertelement <16 x i16> %905, i16 %883, i32 12
  %907 = insertelement <16 x i16> %906, i16 %883, i32 13
  %908 = insertelement <16 x i16> %907, i16 %883, i32 14
  %909 = insertelement <16 x i16> %908, i16 %884, i32 15
  %910 = insertelement <16 x i16> %909, i16 %884, i32 16
  %911 = insertelement <16 x i16> %910, i16 %884, i32 17
  %912 = insertelement <16 x i16> %911, i16 %884, i32 18
  %913 = insertelement <16 x i16> %912, i16 %884, i32 19
  %914 = insertelement <16 x i16> %913, i16 %884, i32 20
  %915 = insertelement <16 x i16> %914, i16 %885, i32 21
  %916 = insertelement <16 x i16> %915, i16 %885, i32 22
  %917 = insertelement <16 x i16> %916, i16 %885, i32 23
  %918 = insertelement <16 x i16> %917, i16 %885, i32 24
  %919 = insertelement <16 x i16> %918, i16 %885, i32 25
  %920 = insertelement <16 x i16> %919, i16 %885, i32 26
  %921 = insertelement <16 x i16> %920, i16 %885, i32 27
  %922 = insertelement <16 x i16> %921, i16 %887, i32 28
  %923 = insertelement <16 x i16> %922, i16 %888, i32 29
  %924 = insertelement <16 x i16> %923, i16 %888, i32 30
  %925 = insertelement <16 x i16> %924, i16 %889, i32 31
  %926 = insertelement <16 x i16> %925, i16 %889, i32 32
  %927 = insertelement <16 x i16> %926, i16 %889, i32 33
  %928 = insertelement <16 x i16> %927, i16 %890, i32 34
  %929 = insertelement <16 x i16> %928, i16 %890, i32 35
  %930 = insertelement <16 x i16> %929, i16 %890, i32 36
  %931 = insertelement <16 x i16> %930, i16 %890, i32 37
  %932 = insertelement <16 x i16> %931, i16 %891, i32 38
  %933 = insertelement <16 x i16> %932, i16 %891, i32 39
  %934 = insertelement <16 x i16> %933, i16 %891, i32 40
  %935 = insertelement <16 x i16> %934, i16 %891, i32 41
  %936 = insertelement <16 x i16> %935, i16 %891, i32 42
  %937 = insertelement <16 x i16> %936, i16 %892, i32 43
  %938 = insertelement <16 x i16> %937, i16 %892, i32 44
  %939 = insertelement <16 x i16> %938, i16 %892, i32 45
  %940 = insertelement <16 x i16> %939, i16 %892, i32 46
  %941 = insertelement <16 x i16> %940, i16 %892, i32 47
  %942 = insertelement <16 x i16> %941, i16 %892, i32 48
  %943 = insertelement <16 x i16> %942, i16 %893, i32 49
  %944 = insertelement <16 x i16> %943, i16 %893, i32 50
  %945 = insertelement <16 x i16> %944, i16 %893, i32 51
  %946 = insertelement <16 x i16> %945, i16 %893, i32 52
  %947 = insertelement <16 x i16> %946, i16 %893, i32 53
  %948 = insertelement <16 x i16> %947, i16 %893, i32 54
  %949 = insertelement <16 x i16> %948, i16 %893, i32 55
  %950 = bitcast <16 x i16> %949 to <8 x i32>
  %951 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %950)
  %952 = fmul <8 x float> undef, %951
  %953 = bitcast float* %876 to <4 x float>*
  %954 = bitcast <4 x float>* %875 to <8 x float>*
  store <8 x float> %952, <8 x float>* %954, align 1, !tbaa !2
  %955 = getelementptr inbounds i8, i8* %604, i64 %1
  %956 = add nuw i64 %603, 1
  %957 = icmp eq i64 %956, %3
  br i1 %957, label %1140, label %602

; <label>:958:                                    ; preds = %412
  br i1 %414, label %1140, label %959

; <label>:959:                                    ; preds = %958
  br label %960

; <label>:960:                                    ; preds = %960, %959
  %961 = phi i64 [ %1138, %960 ], [ 0, %959 ]
  %962 = phi i8* [ %1137, %960 ], [ %0, %959 ]
  %963 = phi float* [ %966, %960 ], [ %4, %959 ]
  %964 = getelementptr inbounds i8, i8* %962, i64 %2
  %965 = getelementptr inbounds i8, i8* %964, i64 -16
  %966 = getelementptr inbounds float, float* %963, i64 %2
  %967 = getelementptr inbounds float, float* %966, i64 -16
  %968 = bitcast i8* %965 to <16 x i8>*
  %969 = load <16 x i8>, <16 x i8>* %968, align 1, !tbaa !2
  %970 = shufflevector <16 x i8> %969, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %971 = bitcast <16 x i8> %970 to <8 x i16>
  %972 = shufflevector <8 x i16> %971, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %973 = bitcast float* %967 to <4 x float>*
  %974 = getelementptr inbounds float, float* %967, i64 4
  %975 = shufflevector <8 x i16> %971, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %976 = extractelement <8 x i16> %972, i32 0
  %977 = extractelement <8 x i16> %972, i32 1
  %978 = extractelement <8 x i16> %972, i32 2
  %979 = extractelement <8 x i16> %972, i32 3
  %980 = extractelement <8 x i16> %972, i32 4
  %981 = extractelement <8 x i16> %972, i32 5
  %982 = extractelement <8 x i16> %972, i32 6
  %983 = extractelement <8 x i16> %972, i32 7
  %984 = extractelement <8 x i16> %975, i32 0
  %985 = extractelement <8 x i16> %975, i32 1
  %986 = extractelement <8 x i16> %975, i32 2
  %987 = extractelement <8 x i16> %975, i32 3
  %988 = extractelement <8 x i16> %975, i32 4
  %989 = extractelement <8 x i16> %975, i32 5
  %990 = extractelement <8 x i16> %975, i32 6
  %991 = extractelement <8 x i16> %975, i32 7
  %992 = insertelement <16 x i16> undef, i16 %977, i32 0
  %993 = insertelement <16 x i16> %992, i16 %978, i32 1
  %994 = insertelement <16 x i16> %993, i16 %978, i32 2
  %995 = insertelement <16 x i16> %994, i16 %979, i32 3
  %996 = insertelement <16 x i16> %995, i16 %979, i32 4
  %997 = insertelement <16 x i16> %996, i16 %979, i32 5
  %998 = insertelement <16 x i16> %997, i16 %980, i32 6
  %999 = insertelement <16 x i16> %998, i16 %980, i32 7
  %1000 = insertelement <16 x i16> %999, i16 %980, i32 8
  %1001 = insertelement <16 x i16> %1000, i16 %980, i32 9
  %1002 = insertelement <16 x i16> %1001, i16 %981, i32 10
  %1003 = insertelement <16 x i16> %1002, i16 %981, i32 11
  %1004 = insertelement <16 x i16> %1003, i16 %981, i32 12
  %1005 = insertelement <16 x i16> %1004, i16 %981, i32 13
  %1006 = insertelement <16 x i16> %1005, i16 %981, i32 14
  %1007 = insertelement <16 x i16> %1006, i16 %982, i32 15
  %1008 = insertelement <16 x i16> %1007, i16 %982, i32 16
  %1009 = insertelement <16 x i16> %1008, i16 %982, i32 17
  %1010 = insertelement <16 x i16> %1009, i16 %982, i32 18
  %1011 = insertelement <16 x i16> %1010, i16 %982, i32 19
  %1012 = insertelement <16 x i16> %1011, i16 %982, i32 20
  %1013 = insertelement <16 x i16> %1012, i16 %983, i32 21
  %1014 = insertelement <16 x i16> %1013, i16 %983, i32 22
  %1015 = insertelement <16 x i16> %1014, i16 %983, i32 23
  %1016 = insertelement <16 x i16> %1015, i16 %983, i32 24
  %1017 = insertelement <16 x i16> %1016, i16 %983, i32 25
  %1018 = insertelement <16 x i16> %1017, i16 %983, i32 26
  %1019 = insertelement <16 x i16> %1018, i16 %983, i32 27
  %1020 = insertelement <16 x i16> %1019, i16 %985, i32 28
  %1021 = insertelement <16 x i16> %1020, i16 %986, i32 29
  %1022 = insertelement <16 x i16> %1021, i16 %986, i32 30
  %1023 = insertelement <16 x i16> %1022, i16 %987, i32 31
  %1024 = insertelement <16 x i16> %1023, i16 %987, i32 32
  %1025 = insertelement <16 x i16> %1024, i16 %987, i32 33
  %1026 = insertelement <16 x i16> %1025, i16 %988, i32 34
  %1027 = insertelement <16 x i16> %1026, i16 %988, i32 35
  %1028 = insertelement <16 x i16> %1027, i16 %988, i32 36
  %1029 = insertelement <16 x i16> %1028, i16 %988, i32 37
  %1030 = insertelement <16 x i16> %1029, i16 %989, i32 38
  %1031 = insertelement <16 x i16> %1030, i16 %989, i32 39
  %1032 = insertelement <16 x i16> %1031, i16 %989, i32 40
  %1033 = insertelement <16 x i16> %1032, i16 %989, i32 41
  %1034 = insertelement <16 x i16> %1033, i16 %989, i32 42
  %1035 = insertelement <16 x i16> %1034, i16 %990, i32 43
  %1036 = insertelement <16 x i16> %1035, i16 %990, i32 44
  %1037 = insertelement <16 x i16> %1036, i16 %990, i32 45
  %1038 = insertelement <16 x i16> %1037, i16 %990, i32 46
  %1039 = insertelement <16 x i16> %1038, i16 %990, i32 47
  %1040 = insertelement <16 x i16> %1039, i16 %990, i32 48
  %1041 = insertelement <16 x i16> %1040, i16 %991, i32 49
  %1042 = insertelement <16 x i16> %1041, i16 %991, i32 50
  %1043 = insertelement <16 x i16> %1042, i16 %991, i32 51
  %1044 = insertelement <16 x i16> %1043, i16 %991, i32 52
  %1045 = insertelement <16 x i16> %1044, i16 %991, i32 53
  %1046 = insertelement <16 x i16> %1045, i16 %991, i32 54
  %1047 = insertelement <16 x i16> %1046, i16 %991, i32 55
  %1048 = bitcast <16 x i16> %1047 to <8 x i32>
  %1049 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %1048)
  %1050 = fmul <8 x float> undef, %1049
  %1051 = bitcast float* %974 to <4 x float>*
  %1052 = bitcast <4 x float>* %973 to <8 x float>*
  store <8 x float> %1050, <8 x float>* %1052, align 1, !tbaa !2
  %1053 = shufflevector <16 x i8> %969, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1054 = getelementptr inbounds float, float* %967, i64 8
  %1055 = bitcast <16 x i8> %1053 to <8 x i16>
  %1056 = shufflevector <8 x i16> %1055, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1057 = bitcast float* %1054 to <4 x float>*
  %1058 = getelementptr inbounds float, float* %967, i64 12
  %1059 = shufflevector <8 x i16> %1055, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1060 = extractelement <8 x i16> %1056, i32 0
  %1061 = extractelement <8 x i16> %1056, i32 1
  %1062 = extractelement <8 x i16> %1056, i32 2
  %1063 = extractelement <8 x i16> %1056, i32 3
  %1064 = extractelement <8 x i16> %1056, i32 4
  %1065 = extractelement <8 x i16> %1056, i32 5
  %1066 = extractelement <8 x i16> %1056, i32 6
  %1067 = extractelement <8 x i16> %1056, i32 7
  %1068 = extractelement <8 x i16> %1059, i32 0
  %1069 = extractelement <8 x i16> %1059, i32 1
  %1070 = extractelement <8 x i16> %1059, i32 2
  %1071 = extractelement <8 x i16> %1059, i32 3
  %1072 = extractelement <8 x i16> %1059, i32 4
  %1073 = extractelement <8 x i16> %1059, i32 5
  %1074 = extractelement <8 x i16> %1059, i32 6
  %1075 = extractelement <8 x i16> %1059, i32 7
  %1076 = insertelement <16 x i16> undef, i16 %1061, i32 0
  %1077 = insertelement <16 x i16> %1076, i16 %1062, i32 1
  %1078 = insertelement <16 x i16> %1077, i16 %1062, i32 2
  %1079 = insertelement <16 x i16> %1078, i16 %1063, i32 3
  %1080 = insertelement <16 x i16> %1079, i16 %1063, i32 4
  %1081 = insertelement <16 x i16> %1080, i16 %1063, i32 5
  %1082 = insertelement <16 x i16> %1081, i16 %1064, i32 6
  %1083 = insertelement <16 x i16> %1082, i16 %1064, i32 7
  %1084 = insertelement <16 x i16> %1083, i16 %1064, i32 8
  %1085 = insertelement <16 x i16> %1084, i16 %1064, i32 9
  %1086 = insertelement <16 x i16> %1085, i16 %1065, i32 10
  %1087 = insertelement <16 x i16> %1086, i16 %1065, i32 11
  %1088 = insertelement <16 x i16> %1087, i16 %1065, i32 12
  %1089 = insertelement <16 x i16> %1088, i16 %1065, i32 13
  %1090 = insertelement <16 x i16> %1089, i16 %1065, i32 14
  %1091 = insertelement <16 x i16> %1090, i16 %1066, i32 15
  %1092 = insertelement <16 x i16> %1091, i16 %1066, i32 16
  %1093 = insertelement <16 x i16> %1092, i16 %1066, i32 17
  %1094 = insertelement <16 x i16> %1093, i16 %1066, i32 18
  %1095 = insertelement <16 x i16> %1094, i16 %1066, i32 19
  %1096 = insertelement <16 x i16> %1095, i16 %1066, i32 20
  %1097 = insertelement <16 x i16> %1096, i16 %1067, i32 21
  %1098 = insertelement <16 x i16> %1097, i16 %1067, i32 22
  %1099 = insertelement <16 x i16> %1098, i16 %1067, i32 23
  %1100 = insertelement <16 x i16> %1099, i16 %1067, i32 24
  %1101 = insertelement <16 x i16> %1100, i16 %1067, i32 25
  %1102 = insertelement <16 x i16> %1101, i16 %1067, i32 26
  %1103 = insertelement <16 x i16> %1102, i16 %1067, i32 27
  %1104 = insertelement <16 x i16> %1103, i16 %1069, i32 28
  %1105 = insertelement <16 x i16> %1104, i16 %1070, i32 29
  %1106 = insertelement <16 x i16> %1105, i16 %1070, i32 30
  %1107 = insertelement <16 x i16> %1106, i16 %1071, i32 31
  %1108 = insertelement <16 x i16> %1107, i16 %1071, i32 32
  %1109 = insertelement <16 x i16> %1108, i16 %1071, i32 33
  %1110 = insertelement <16 x i16> %1109, i16 %1072, i32 34
  %1111 = insertelement <16 x i16> %1110, i16 %1072, i32 35
  %1112 = insertelement <16 x i16> %1111, i16 %1072, i32 36
  %1113 = insertelement <16 x i16> %1112, i16 %1072, i32 37
  %1114 = insertelement <16 x i16> %1113, i16 %1073, i32 38
  %1115 = insertelement <16 x i16> %1114, i16 %1073, i32 39
  %1116 = insertelement <16 x i16> %1115, i16 %1073, i32 40
  %1117 = insertelement <16 x i16> %1116, i16 %1073, i32 41
  %1118 = insertelement <16 x i16> %1117, i16 %1073, i32 42
  %1119 = insertelement <16 x i16> %1118, i16 %1074, i32 43
  %1120 = insertelement <16 x i16> %1119, i16 %1074, i32 44
  %1121 = insertelement <16 x i16> %1120, i16 %1074, i32 45
  %1122 = insertelement <16 x i16> %1121, i16 %1074, i32 46
  %1123 = insertelement <16 x i16> %1122, i16 %1074, i32 47
  %1124 = insertelement <16 x i16> %1123, i16 %1074, i32 48
  %1125 = insertelement <16 x i16> %1124, i16 %1075, i32 49
  %1126 = insertelement <16 x i16> %1125, i16 %1075, i32 50
  %1127 = insertelement <16 x i16> %1126, i16 %1075, i32 51
  %1128 = insertelement <16 x i16> %1127, i16 %1075, i32 52
  %1129 = insertelement <16 x i16> %1128, i16 %1075, i32 53
  %1130 = insertelement <16 x i16> %1129, i16 %1075, i32 54
  %1131 = insertelement <16 x i16> %1130, i16 %1075, i32 55
  %1132 = bitcast <16 x i16> %1131 to <8 x i32>
  %1133 = call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %1132)
  %1134 = fmul <8 x float> undef, %1133
  %1135 = bitcast float* %1058 to <4 x float>*
  %1136 = bitcast <4 x float>* %1057 to <8 x float>*
  store <8 x float> %1134, <8 x float>* %1136, align 1, !tbaa !2
  %1137 = getelementptr inbounds i8, i8* %962, i64 %1
  %1138 = add nuw i64 %961, 1
  %1139 = icmp eq i64 %1138, %3
  br i1 %1139, label %1140, label %960

; <label>:1140:                                   ; preds = %960, %958, %781, %597, %409, %401, %219, %216
  ret void
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.x86.sse2.mfence() #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse2.cvtdq2ps(<4 x i32>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32>) #5

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-clwb,-clzero,-fma4,-gfni,-ibt,-lwp,-mwaitx,-pku,-prefetchwt1,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-clwb,-clzero,-fma4,-gfni,-ibt,-lwp,-mwaitx,-pku,-prefetchwt1,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake" "target-features"="+adx,+aes,+avx,+avx2,+bmi,+bmi2,+clflushopt,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+popcnt,+prfchw,+rdrnd,+rdseed,+sgx,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-clwb,-clzero,-fma4,-gfni,-ibt,-lwp,-mwaitx,-pku,-prefetchwt1,-rtm,-sha,-shstk,-sse4a,-tbm,-vaes,-vpclmulqdq,-xop" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "target-cpu"="skylake" }
attributes #4 = { nounwind readnone "target-cpu"="skylake" }
attributes #5 = { nounwind readnone }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-svn326550-1~exp1~20180305180131.61 (branches/release_60)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
!5 = !{i32 1}
